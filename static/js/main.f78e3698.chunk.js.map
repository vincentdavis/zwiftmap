{"version":3,"sources":["App.module.css","ElevationChart.module.css","webpack:///./src/constants.ts?85ee","data/routes.ts","SegmentRepository.ts","util/simplify.ts","ElevationChart.tsx","worldConfig.ts","maps/crit-city.png","maps/france.png","maps/innsbruck.png","maps/london.png","maps/new-york.png","maps/paris.png","maps/richmond.png","maps/watopia.png","maps/yorkshire.png","util.ts","RouteMap.tsx","RouteSelector.tsx","App.tsx","hooks/useHash.ts","index.tsx","RouteSelector.module.css"],"names":["module","exports","WORLDS","routes","segmentCache","getSegment","segmentSlug","a","fetchSegment","fetch","response","json","getSqDist","p1","p2","dx","x","dy","y","getSqSegDist","p","t","simplifyRadialDist","points","sqTolerance","point","prevPoint","newPoints","i","len","length","push","simplifyDPStep","first","last","simplified","index","maxSqDist","sqDist","simplifyDouglasPeucker","simplify","tolerance","highestQuality","ElevationChart","route","segment","useAsync","slug","result","data","useMemo","undefined","id","distance","map","altitude","className","styles","Container","margin","top","right","bottom","left","xScale","type","min","max","yScale","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","format","value","axisLeft","tickValues","pointSize","useMesh","enableSlices","animate","enableGridX","sliceTooltip","slice","style","background","padding","border","Math","round","worldConfigs","bounds","image","france","innsbruck","london","paris","richmond","watopia","yorkshire","flipLatLng","RouteMap","routeSelection","mouseHoverDistance","world","worldConfig","LatLngBounds","useState","setMap","r","useEffect","latlng","reduce","coord","extend","invalidateSize","fitBounds","setMaxBounds","minZoom","getBoundsZoom","setMinZoom","setZoom","pointCoordinates","line","lineString","along","units","geometry","coordinates","MapContainer","whenCreated","ImageOverlay","url","attribution","Polyline","positions","pathOptions","color","weight","Circle","center","radius","fillColor","fillOpacity","RouteSelector","selection","onChange","handleChange","e","target","checked","find","filteredRoutes","filter","sport","stravaSegmentId","sort","b","name","localeCompare","Sidebar","c","Item","selected","App","window","location","hash","setHash","listener","addEventListener","removeEventListener","useHash","includes","setMouseHoverDistance","Wrapper","routeSelected","rs","onMouseHoverDistanceChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f78e3698.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\",\"routeSelected\":\"App_routeSelected__V3XxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ElevationChart_Container__3f2Iq\"};","import { World } from \"./types\";\n\nexport const WORLDS: World[] = [\n  \"crit-city\",\n  \"france\",\n  \"innsbruck\",\n  \"london\",\n  \"new-york\",\n  \"paris\",\n  \"richmond\",\n  \"watopia\",\n  \"yorkshire\",\n];\n","import { Route } from \"../types\";\nimport routesJSON from \"./routes.json\";\n\nexport const routes: Route[] = routesJSON as any;\n","import { Segment } from \"./types\";\n\nconst segmentCache: { [segmentSlug: string]: Promise<Segment> } = {};\n\nexport async function getSegment(segmentSlug: string): Promise<Segment> {\n  if (!segmentCache[segmentSlug]) {\n    segmentCache[segmentSlug] = fetchSegment(segmentSlug);\n  }\n\n  return await segmentCache[segmentSlug];\n}\n\nasync function fetchSegment(segmentSlug: string) {\n  const response = await fetch(`segments/${segmentSlug}.json`);\n  return await response.json();\n}\n","// @see: https://github.com/mourner/simplify-js\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction getSqDist(p1: Point, p2: Point) {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p: Point, p1: Point, p2: Point) {\n  let x = p1.x;\n  let y = p1.y;\n  let dx = p2.x - x;\n  let dy = p2.y - y;\n\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2.x;\n      y = p2.y;\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p.x - x;\n  dy = p.y - y;\n\n  return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points: Point[], sqTolerance: number) {\n  let prevPoint = points[0];\n  const newPoints = [prevPoint];\n\n  let point: Point | undefined;\n  for (let i = 1, len = points.length; i < len; ++i) {\n    point = points[i];\n\n    if (getSqDist(point, prevPoint) > sqTolerance) {\n      newPoints.push(point);\n      prevPoint = point;\n    }\n  }\n\n  if (prevPoint !== point) {\n    newPoints.push(point!);\n  }\n\n  return newPoints;\n}\n\nfunction simplifyDPStep(\n  points: Point[],\n  first: number,\n  last: number,\n  sqTolerance: number,\n  simplified: Point[]\n) {\n  let maxSqDist = sqTolerance;\n\n  let index: number | undefined;\n  for (let i = first + 1; i < last; ++i) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index! - first > 1) {\n      simplifyDPStep(points, first, index!, sqTolerance, simplified);\n    }\n    simplified.push(points[index!]);\n    if (last - index! > 1) {\n      simplifyDPStep(points, index!, last, sqTolerance, simplified);\n    }\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points: Point[], sqTolerance: number) {\n  const last = points.length - 1;\n\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n\n  return simplified;\n}\n\n// both algorithms combined for awesome performance\nexport function simplify(\n  points: Point[],\n  tolerance = 1,\n  highestQuality = false\n) {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance * tolerance;\n\n  points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n  points = simplifyDouglasPeucker(points, sqTolerance);\n\n  return points;\n}\n","import { ResponsiveLine, Serie } from \"@nivo/line\";\nimport React, { useMemo } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport styles from \"./ElevationChart.module.css\";\nimport { getSegment } from \"./SegmentRepository\";\nimport { Route } from \"./types\";\nimport { simplify } from \"./util/simplify\";\n\ninterface Props {\n  route: Route;\n  onMouseHoverDistanceChange: (distance: number | undefined) => void;\n}\n\nexport function ElevationChart({ route }: Props) {\n  const { result: segment } = useAsync(getSegment, [route.slug]);\n\n  const data: Serie[] | undefined = useMemo(() => {\n    if (segment === undefined) {\n      return;\n    }\n\n    const serie = {\n      id: \"Elevation\",\n      data: simplify(\n        segment.distance.map((distance, index) => ({\n          x: distance,\n          y: segment.altitude[index],\n        })),\n        0.25\n      ),\n    };\n\n    return [serie];\n  }, [segment]);\n\n  if (data === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={styles.Container}>\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 25, right: 25, bottom: 50, left: 50 }}\n        xScale={{ type: \"linear\", min: \"auto\", max: \"auto\" }}\n        yScale={{ type: \"linear\", min: \"auto\", max: \"auto\" }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          orient: \"bottom\",\n          tickSize: 5,\n          tickPadding: 5,\n          format: (value) => `${(value as number) / 1_000} km`,\n        }}\n        axisLeft={{\n          orient: \"left\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickValues: 5,\n          format: (value) => `${value} m`,\n        }}\n        pointSize={0}\n        useMesh={true}\n        enableSlices=\"x\"\n        animate={false}\n        enableGridX={false}\n        sliceTooltip={({ slice }) => (\n          <table\n            style={{\n              background: \"white\",\n              padding: \"9px 12px\",\n              border: \"1px solid #ccc\",\n            }}\n          >\n            <tbody>\n              <tr>\n                <td>Distance:</td>\n                <td>\n                  <strong>\n                    {Math.round((slice.points[0].data.x as number) / 1_000)} km\n                  </strong>\n                </td>\n              </tr>\n              <tr>\n                <td>Elevation:</td>\n                <td>\n                  <strong>\n                    {Math.round(slice.points[0].data.y as number)} m\n                  </strong>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        )}\n      />\n    </div>\n  );\n}\n","import { LatLngTuple } from \"leaflet\";\nimport critCityMap from \"./maps/crit-city.png\";\nimport franceMap from \"./maps/france.png\";\nimport innsbruckMap from \"./maps/innsbruck.png\";\nimport londonMap from \"./maps/london.png\";\nimport newYorkMap from \"./maps/new-york.png\";\nimport parisMap from \"./maps/paris.png\";\nimport richmondMap from \"./maps/richmond.png\";\nimport watopiaMap from \"./maps/watopia.png\";\nimport yorkshireMap from \"./maps/yorkshire.png\";\nimport { World } from \"./types\";\n\nexport type WorldConfig = {\n  bounds: [LatLngTuple, LatLngTuple];\n  image: string;\n};\n\nexport const worldConfigs: Record<World, WorldConfig> = {\n  \"crit-city\": {\n    bounds: [\n      [-10.3657, 165.7824],\n      [-10.4038, 165.8207],\n    ],\n    image: critCityMap,\n  },\n\n  france: {\n    bounds: [\n      [-21.64155, 166.1384],\n      [-21.7564, 166.26125],\n    ],\n    image: franceMap,\n  },\n\n  innsbruck: {\n    bounds: [\n      [47.2947, 11.3501],\n      [47.2055, 11.4822],\n    ],\n    image: innsbruckMap,\n  },\n\n  london: {\n    bounds: [\n      [51.5362, -0.1776],\n      [51.4601, -0.0555],\n    ],\n    image: londonMap,\n  },\n\n  \"new-york\": {\n    bounds: [\n      [40.81725, -74.0227],\n      [40.74085, -73.9222],\n    ],\n    image: newYorkMap,\n  },\n\n  paris: {\n    bounds: [\n      [48.9058, 2.2561],\n      [48.82945, 2.3722],\n    ],\n    image: parisMap,\n  },\n\n  richmond: {\n    bounds: [\n      [37.5774, -77.48954],\n      [37.5014, -77.394],\n    ],\n    image: richmondMap,\n  },\n\n  watopia: {\n    bounds: [\n      [-11.62597, 166.87747],\n      [-11.70255, 167.03255],\n    ],\n    image: watopiaMap,\n  },\n  yorkshire: {\n    bounds: [\n      [54.0254, -1.632],\n      [53.9491, -1.5022],\n    ],\n    image: yorkshireMap,\n  },\n};\n","export default __webpack_public_path__ + \"static/media/crit-city.3bab2d0f.png\";","export default __webpack_public_path__ + \"static/media/france.5e310dc4.png\";","export default __webpack_public_path__ + \"static/media/innsbruck.9821ed90.png\";","export default __webpack_public_path__ + \"static/media/london.54ae112e.png\";","export default __webpack_public_path__ + \"static/media/new-york.5bf9b5e8.png\";","export default __webpack_public_path__ + \"static/media/paris.63398748.png\";","export default __webpack_public_path__ + \"static/media/richmond.72df812b.png\";","export default __webpack_public_path__ + \"static/media/watopia.0901a23e.png\";","export default __webpack_public_path__ + \"static/media/yorkshire.b83235cf.png\";","export function flipLatLng(p: [number, number]): [number, number] {\n  return [p[1], p[0]];\n}\n","import along from \"@turf/along\";\nimport { lineString } from \"@turf/helpers\";\nimport \"leaflet/dist/leaflet.css\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { Circle, ImageOverlay, MapContainer, Polyline } from \"react-leaflet\";\nimport { RouteSelection } from \"./RouteSelector\";\nimport { getSegment } from \"./SegmentRepository\";\nimport { Route } from \"./types\";\nimport { worldConfigs } from \"./worldConfig\";\nimport { LatLngBounds, LatLngExpression, Map } from \"leaflet\";\nimport { flipLatLng } from \"./util\";\n\ninterface Props {\n  routeSelection: RouteSelection;\n  mouseHoverDistance: number | undefined;\n}\n\nexport default function RouteMap({\n  routeSelection,\n  mouseHoverDistance,\n}: Props) {\n  const world = routeSelection.world;\n  const worldConfig = worldConfigs[world];\n  const bounds = useMemo(() => new LatLngBounds(worldConfig.bounds), [\n    worldConfig,\n  ]);\n\n  const [map, setMap] = useState<Map | undefined>();\n\n  const { result: segment } = useAsync(\n    async (r?: Route) => {\n      if (r === undefined) {\n        return;\n      }\n\n      return await getSegment(r.slug);\n    },\n    [routeSelection.route]\n  );\n\n  useEffect(() => {\n    if (!map || !segment) {\n      return;\n    }\n\n    const bounds = segment.latlng.reduce(\n      (bounds, coord) => bounds.extend(coord),\n      new LatLngBounds(segment.latlng[0], segment.latlng[0])\n    );\n\n    map.invalidateSize();\n    map.fitBounds(bounds, {\n      padding: [20, 20],\n    });\n  }, [map, segment]);\n\n  useEffect(() => {\n    if (!map || !routeSelection) {\n      return;\n    }\n\n    const world = routeSelection.world;\n    const worldConfig = worldConfigs[world];\n    const bounds = new LatLngBounds(worldConfig.bounds);\n\n    map.invalidateSize();\n    map.setMaxBounds(bounds);\n\n    const minZoom = map.getBoundsZoom(bounds, true);\n    map.setMinZoom(minZoom);\n\n    if (!routeSelection.route) {\n      map.setZoom(minZoom, { animate: false });\n    }\n  }, [map, routeSelection]);\n\n  const pointCoordinates = useMemo<LatLngExpression | undefined>(() => {\n    if (!segment || !mouseHoverDistance) {\n      return;\n    }\n\n    const line = lineString(segment.latlng.map(flipLatLng));\n    const point = along(line, mouseHoverDistance, { units: \"kilometers\" });\n    return [point.geometry.coordinates[1], point.geometry.coordinates[0]];\n  }, [segment, mouseHoverDistance]);\n\n  return (\n    <MapContainer\n      key={routeSelection.world}\n      whenCreated={(map) => setMap(map)}\n      bounds={bounds}\n    >\n      <ImageOverlay\n        url={worldConfig.image}\n        bounds={bounds}\n        attribution='&amp;copy <a href=\"https://zwift.com\" rel=\"noreferrer noopener\">Zwift</a>'\n      />\n      {segment && (\n        <Polyline\n          positions={segment.latlng}\n          pathOptions={{ color: \"#fc6719\", weight: 4 }}\n        />\n      )}\n      {pointCoordinates && (\n        <Circle\n          center={pointCoordinates}\n          radius={5}\n          pathOptions={{\n            color: \"white\",\n            fillColor: \"white\",\n            fillOpacity: 1,\n          }}\n        />\n      )}\n    </MapContainer>\n  );\n}\n","import c from \"classnames\";\nimport { ChangeEvent } from \"react\";\nimport { routes } from \"./data/routes\";\nimport styles from \"./RouteSelector.module.css\";\nimport { Route, World } from \"./types\";\n\nexport interface RouteSelection {\n  world: World;\n  route?: Route;\n}\n\ninterface Props {\n  selection: RouteSelection;\n  onChange: (route: RouteSelection) => void;\n}\nexport default function RouteSelector({ selection, onChange }: Props) {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      const route = routes.find((r) => r.slug === e.target.value)!;\n      onChange({ world: route.world, route });\n    }\n  };\n\n  const filteredRoutes = routes\n    .filter((route) => route.world === selection.world)\n    .filter((route) => route.sport === \"cycling\")\n    .filter((route) => route.stravaSegmentId !== undefined)\n    .sort((a, b) => a.name.localeCompare(b.name));\n\n  return (\n    <div className={styles.Container}>\n      <div className={styles.Sidebar}>\n        <select\n          value={selection.world}\n          onChange={(e) => onChange({ world: e.target.value as World })}\n        >\n          <option value=\"crit-city\">Crit City</option>\n          <option value=\"france\">France</option>\n          <option value=\"innsbruck\">Innsbruck</option>\n          <option value=\"london\">London</option>\n          <option value=\"new-york\">New York</option>\n          <option value=\"paris\">Paris</option>\n          <option value=\"richmond\">Richmond</option>\n          <option value=\"watopia\">Watopia</option>\n          <option value=\"yorkshire\">Yorkshire</option>\n        </select>\n\n        {filteredRoutes.map((route) => (\n          <label\n            key={route.slug}\n            className={c(styles.Item, {\n              [styles.selected]: selection.route?.slug === route.slug,\n            })}\n          >\n            <input\n              type=\"radio\"\n              name=\"routes\"\n              value={route.slug}\n              checked={selection.route?.slug === route.slug}\n              onChange={handleChange}\n            />\n            {route.name}\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import c from \"classnames\";\nimport React, { useMemo, useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport { WORLDS } from \"./constants\";\nimport { routes } from \"./data/routes\";\nimport { ElevationChart } from \"./ElevationChart\";\nimport { useHash } from \"./hooks/useHash\";\nimport RouteMap from \"./RouteMap\";\nimport RouteSelector, { RouteSelection } from \"./RouteSelector\";\nimport { World } from \"./types\";\n\nexport default function App() {\n  const [hash, setHash] = useHash();\n  const routeSelection = useMemo<RouteSelection>(() => {\n    if (WORLDS.includes(hash as any)) {\n      return { world: hash as World };\n    } else if (routes.find((r) => r.slug === hash)) {\n      const route = routes.find((r) => r.slug === hash)!;\n      return {\n        world: route.world,\n        route,\n      };\n    }\n\n    return { world: \"watopia\" as World };\n  }, [hash]);\n\n  const handleRouteSelectionChange = (rs: RouteSelection) => {\n    if (rs.route) {\n      setHash(rs.route.slug);\n    } else {\n      setHash(rs.world);\n    }\n  };\n\n  const [mouseHoverDistance, setMouseHoverDistance] = useState<\n    number | undefined\n  >(undefined);\n\n  return (\n    <div\n      className={c(styles.Wrapper, {\n        [styles.routeSelected]: routeSelection.route !== undefined,\n      })}\n    >\n      <RouteSelector\n        selection={routeSelection}\n        onChange={handleRouteSelectionChange}\n      />\n      <RouteMap\n        routeSelection={routeSelection}\n        mouseHoverDistance={mouseHoverDistance}\n      />\n      {routeSelection.route && (\n        <ElevationChart\n          route={routeSelection.route}\n          onMouseHoverDistanceChange={setMouseHoverDistance}\n        />\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useHash(): [string, (hash: string) => void] {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const listener = () => {\n      setHash(window.location.hash);\n    };\n\n    window.addEventListener(\"popstate\", listener);\n    return () => window.removeEventListener(\"popstate\", listener);\n  }, []);\n\n  const updateHash = (hash: string) => {\n    window.location.hash = `#${hash}`;\n  };\n\n  return [hash.slice(1), updateHash];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"app\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RouteSelector_Container__2aeQm\",\"Sidebar\":\"RouteSelector_Sidebar__25tGa\",\"Item\":\"RouteSelector_Item__402nz\",\"selected\":\"RouteSelector_selected__2JMs6\"};"],"sourceRoot":""}