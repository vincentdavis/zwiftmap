{"version":3,"sources":["RouteSelector.module.css","App.module.css","RouteSelector.tsx","RouteMap.tsx","App.tsx","index.tsx"],"names":["module","exports","RouteSelector","selectedRouteKey","routeKey","onChange","className","styles","Container","Object","entries","routes","map","route","c","Item","selected","onClick","name","MAX_BOUNDS","Mapbox","ReactMapboxGl","accessToken","minZoom","maxZoom","routePaint","RouteMap","geojson","useQuery","a","undefined","fetch","response","json","data","useState","setMap","useEffect","coordinates","geometry","bounds","reduce","coord","extend","LngLatBounds","fitBounds","padding","style","containerStyle","height","width","maxBounds","onStyleLoad","linePaint","App","setRouteKey","Wrapper","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,UAAY,iCAAiC,KAAO,4BAA4B,SAAW,kC,sQCA7GD,EAAOC,QAAU,CAAC,QAAU,uB,iLCQb,SAASC,EAAT,GAGJ,IAFCC,EAEF,EAFRC,SACAC,EACQ,EADRA,SAEA,OACE,qBAAKC,UAAWC,IAAOC,UAAvB,SACGC,OAAOC,QAAQC,GAAQC,KAAI,mCAAER,EAAF,KAAYS,EAAZ,YAC1B,wBAEEP,UAAWQ,IAAEP,IAAOQ,KAAR,eACTR,IAAOS,SAAWb,IAAqBC,IAE1Ca,QAAS,kBAAMZ,EAASD,IAL1B,SAOGS,EAAMK,MANFd,Q,qECPTe,EAAwB,CAC5B,CAAC,UAAW,UACZ,CAAC,UAAW,UAKRC,EAASC,YAAc,CAC3BC,YACE,mGACFC,QANe,GAOfC,QANe,KAWXC,EAAwB,CAC5B,aAAc,UACd,aAAc,GAOD,SAASC,EAAT,GAAwC,IAApBtB,EAAmB,EAAnBA,SACnBuB,EAAYC,YAAQ,OAACxB,QAAD,IAACA,IAAY,GAAb,sBAAiB,4BAAAyB,EAAA,yDAC5CzB,EAD4C,8CAExC0B,GAFwC,uBAI1BC,MAAK,mBAEd3B,EAFc,aAJqB,cAI3C4B,EAJ2C,gBAQpCA,EAASC,OAR2B,oFAA3CC,KAD4C,EAY9BC,wBAA0BL,GAZI,mBAY7ClB,EAZ6C,KAYxCwB,EAZwC,KA+BpD,OAjBAC,qBAAU,WACR,GAAKzB,GAAQe,EAAb,CAIA,IAAMW,EAAkCX,EAAQY,SAASD,YAEnDE,EAASF,EAAYG,QACzB,SAACD,EAAQE,GAAT,OAAmBF,EAAOG,OAAOD,KACjC,IAAIE,eAAaN,EAAY,GAAIA,EAAY,KAG/C1B,EAAIiC,UAAUL,EAAQ,CACpBM,QAAS,QAEV,CAAClC,EAAKe,IAGP,eAACP,EAAD,CAEE2B,MA7CQ,yDA8CRC,eAAgB,CACdC,OAAQ,QACRC,MAAO,SAETC,UAAWhC,EACXiC,YAAa,SAACxC,GAAD,OAASwB,EAAOxB,IAR/B,UAUE,cAAC,IAAD,IAECe,GAAW,cAAC,IAAD,CAAcO,KAAMP,EAAS0B,UAAW5B,OC1E3C,SAAS6B,IAAO,IAAD,EACInB,qBADJ,mBACrB/B,EADqB,KACXmD,EADW,KAG5B,OACE,sBAAKjD,UAAWC,IAAOiD,QAAvB,UACE,cAACtD,EAAD,CAAeE,SAAUA,EAAUC,SAAUkD,IAC7C,cAAC7B,EAAD,CAAUtB,SAAUA,O,gBCJpBqD,EAAc,IAAIC,IAExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAqBC,OAAQN,EAA7B,SACE,cAACH,EAAD,QAGJU,SAASC,eAAe,U","file":"static/js/main.74f6be95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RouteSelector_Container__2aeQm\",\"Item\":\"RouteSelector_Item__402nz\",\"selected\":\"RouteSelector_selected__2JMs6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\"};","import routes from \"./routes.json\";\nimport styles from \"./RouteSelector.module.css\";\nimport c from \"classnames\";\n\ninterface Props {\n  routeKey: string | undefined;\n  onChange: (routeKey: string | undefined) => void;\n}\n\nexport default function RouteSelector({\n  routeKey: selectedRouteKey,\n  onChange,\n}: Props) {\n  return (\n    <div className={styles.Container}>\n      {Object.entries(routes).map(([routeKey, route]) => (\n        <button\n          key={routeKey}\n          className={c(styles.Item, {\n            [styles.selected]: selectedRouteKey === routeKey,\n          })}\n          onClick={() => onChange(routeKey)}\n        >\n          {route.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n","import { LinePaint, LngLatBounds, Map } from \"mapbox-gl\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactMapboxGl, {\n  GeoJSONLayer,\n  // ScaleControl,\n  ZoomControl,\n} from \"react-mapbox-gl\";\nimport { FitBounds } from \"react-mapbox-gl/lib/map\";\nimport { useQuery } from \"react-query\";\n\nconst MAX_BOUNDS: FitBounds = [\n  [166.8778, -11.70256],\n  [167.0321, -11.6259],\n];\nconst MIN_ZOOM = 13;\nconst MAX_ZOOM = 18;\n\nconst Mapbox = ReactMapboxGl({\n  accessToken:\n    \"pk.eyJ1IjoiYW5kaXBhZXR6b2xkIiwiYSI6ImNqOWgyY2F5NjBnNnAyeXBodzByemRsbWoifQ.wW4aCiUFv2PLhGB2S75sNg\",\n  minZoom: MIN_ZOOM,\n  maxZoom: MAX_ZOOM,\n});\n\nconst STYLE = \"mapbox://styles/andipaetzold/ckn7q8rj60q2f17qxug5shkjq\";\n\nconst routePaint: LinePaint = {\n  \"line-color\": \"#fc6719\",\n  \"line-width\": 4,\n};\n\ninterface Props {\n  routeKey: string | undefined;\n}\n\nexport default function RouteMap({ routeKey }: Props) {\n  const { data: geojson } = useQuery(routeKey ?? \"\", async () => {\n    if (!routeKey) {\n      return undefined;\n    }\n    const response = await fetch(\n      // @ts-ignore\n      `segments/${routeKey}.geojson`\n    );\n    return await response.json();\n  });\n\n  const [map, setMap] = useState<Map | undefined>(undefined);\n\n  useEffect(() => {\n    if (!map || !geojson) {\n      return;\n    }\n\n    const coordinates: [number, number][] = geojson.geometry.coordinates;\n\n    const bounds = coordinates.reduce(\n      (bounds, coord) => bounds.extend(coord),\n      new LngLatBounds(coordinates[0], coordinates[0])\n    );\n\n    map.fitBounds(bounds, {\n      padding: 20,\n    });\n  }, [map, geojson]);\n\n  return (\n    <Mapbox\n      // eslint-disable-next-line react/style-prop-object\n      style={STYLE}\n      containerStyle={{\n        height: \"100vh\",\n        width: \"100vw\",\n      }}\n      maxBounds={MAX_BOUNDS}\n      onStyleLoad={(map) => setMap(map)}\n    >\n      <ZoomControl />\n      {/* <ScaleControl /> */}\n      {geojson && <GeoJSONLayer data={geojson} linePaint={routePaint} />}\n    </Mapbox>\n  );\n}\n","import React, { useState } from \"react\";\nimport RouteSelector from \"./RouteSelector\";\nimport styles from \"./App.module.css\";\nimport RouteMap from \"./RouteMap\";\n\nexport default function App() {\n  const [routeKey, setRouteKey] = useState<string | undefined>();\n\n  return (\n    <div className={styles.Wrapper}>\n      <RouteSelector routeKey={routeKey} onChange={setRouteKey} />\n      <RouteMap routeKey={routeKey} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"app\")\n);\n"],"sourceRoot":""}