{"version":3,"sources":["RouteSelector.module.css","App.module.css","RouteSelector.tsx","RouteGeoJSONRepository.ts","RouteMap.tsx","App.tsx","index.tsx"],"names":["module","exports","filteredRoutes","routes","filter","route","world","sport","stravaid","RouteSelector","selectedRouteId","routeId","onChange","className","styles","Container","map","c","Item","selected","routeid","onClick","routeGeoJSONCache","getRouteGeoJSON","a","fetch","response","json","MAX_BOUNDS","Mapbox","ReactMapboxGl","accessToken","minZoom","maxZoom","routePaint","RouteMap","geojson","useAsync","undefined","result","useState","setMap","useEffect","coordinates","geometry","bounds","reduce","coord","extend","LngLatBounds","fitBounds","padding","style","containerStyle","height","width","maxBounds","onStyleLoad","data","linePaint","App","setRouteId","Wrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,UAAY,iCAAiC,KAAO,4BAA4B,SAAW,kC,o2uBCA7GD,EAAOC,QAAU,CAAC,QAAU,uB,sKCItBC,EAA4BC,EAC/BC,QAAO,SAACC,GAAD,MAA2B,YAAhBA,EAAMC,SACxBF,QAAO,SAACC,GAAD,MAA2B,YAAhBA,EAAME,SACxBH,QAAO,SAACC,GAAD,OAAWA,EAAMG,SAAW,KAOvB,SAASC,EAAT,GAGJ,IAFAC,EAED,EAFRC,QACAC,EACQ,EADRA,SAEA,OACE,qBAAKC,UAAWC,IAAOC,UAAvB,SACGb,EAAec,KAAI,SAACX,GAAD,OAClB,wBAEEQ,UAAWI,IAAEH,IAAOI,KAAR,eACTJ,IAAOK,SAAWT,IAAoBL,EAAMe,UAE/CC,QAAS,kBAAMT,EAASP,EAAMe,UALhC,SAOGf,EAAMA,OANFA,EAAMe,c,2DCvBfE,EAAgD,GAE/C,SAAeC,EAAtB,kC,4CAAO,WAA+BZ,GAA/B,eAAAa,EAAA,yDACAF,EAAkBX,GADlB,gCAEoBc,MAAM,YAAD,OAAad,EAAb,aAFzB,cAEGe,EAFH,gBAGgCA,EAASC,OAHzC,OAGHL,EAAkBX,GAHf,uCAMEW,EAAkBX,IANpB,4C,kCCSDiB,EAAwB,CAC5B,CAAC,UAAW,UACZ,CAAC,UAAW,UAKRC,EAASC,YAAc,CAC3BC,YACE,mGACFC,QANe,GAOfC,QANe,KAWXC,EAAwB,CAC5B,aAAc,UACd,aAAc,GAOD,SAASC,EAAT,GAAuC,IAAnBxB,EAAkB,EAAlBA,QACjByB,EAAYC,YAAQ,sBAClC,sBAAAb,EAAA,yDACOb,EADP,8CAEW2B,GAFX,uBAKef,EAAgBZ,GAL/B,mFAOA,CAACA,IARK4B,OAD2C,EAY7BC,wBAA0BF,GAZG,mBAY5CtB,EAZ4C,KAYvCyB,EAZuC,KA+BnD,OAjBAC,qBAAU,WACR,GAAK1B,GAAQoB,EAAb,CAIA,IAAMO,EAAkCP,EAAQQ,SAASD,YAEnDE,EAASF,EAAYG,QACzB,SAACD,EAAQE,GAAT,OAAmBF,EAAOG,OAAOD,KACjC,IAAIE,eAAaN,EAAY,GAAIA,EAAY,KAG/C3B,EAAIkC,UAAUL,EAAQ,CACpBM,QAAS,QAEV,CAACnC,EAAKoB,IAGP,eAACP,EAAD,CAEEuB,MA7CQ,yDA8CRC,eAAgB,CACdC,OAAQ,QACRC,MAAO,SAETC,UAAW5B,EACX6B,YAAa,SAACzC,GAAD,OAASyB,EAAOzB,IAR/B,UAUE,cAAC,IAAD,IAECoB,GAAW,cAAC,IAAD,CAAcsB,KAAMtB,EAASuB,UAAWzB,OC3E3C,SAAS0B,IAAO,IAAD,EACEpB,qBADF,mBACrB7B,EADqB,KACZkD,EADY,KAG5B,OACE,sBAAKhD,UAAWC,IAAOgD,QAAvB,UACE,cAACrD,EAAD,CAAeE,QAASA,EAASC,SAAUiD,IAC3C,cAAC1B,EAAD,CAAUxB,QAASA,O,MCLzBoD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACL,EAAD,MAEFM,SAASC,eAAe,U","file":"static/js/main.5965520f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RouteSelector_Container__2aeQm\",\"Item\":\"RouteSelector_Item__402nz\",\"selected\":\"RouteSelector_selected__2JMs6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\"};","import routes from \"./routes.json\";\nimport styles from \"./RouteSelector.module.css\";\nimport c from \"classnames\";\nimport { Route } from \"./types\";\n\nconst filteredRoutes: Route[] = ((routes as unknown) as Route[])\n  .filter((route) => route.world === \"Watopia\")\n  .filter((route) => route.sport === \"cycling\")\n  .filter((route) => route.stravaid > 1);\n\ninterface Props {\n  routeId: number | undefined;\n  onChange: (routeKey: number | undefined) => void;\n}\n\nexport default function RouteSelector({\n  routeId: selectedRouteId,\n  onChange,\n}: Props) {\n  return (\n    <div className={styles.Container}>\n      {filteredRoutes.map((route) => (\n        <button\n          key={route.routeid}\n          className={c(styles.Item, {\n            [styles.selected]: selectedRouteId === route.routeid,\n          })}\n          onClick={() => onChange(route.routeid)}\n        >\n          {route.route}\n        </button>\n      ))}\n    </div>\n  );\n}\n","const routeGeoJSONCache: { [routeid: number]: any } = {};\n\nexport async function getRouteGeoJSON(routeId: number): Promise<any> {\n  if (!routeGeoJSONCache[routeId]) {\n    const response = await fetch(`segments/${routeId}.geojson`);\n    routeGeoJSONCache[routeId] = await response.json();\n  }\n\n  return routeGeoJSONCache[routeId];\n}\n","import { LinePaint, LngLatBounds, Map } from \"mapbox-gl\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactMapboxGl, {\n  GeoJSONLayer,\n  // ScaleControl,\n  ZoomControl,\n} from \"react-mapbox-gl\";\nimport { FitBounds } from \"react-mapbox-gl/lib/map\";\nimport { getRouteGeoJSON } from \"./RouteGeoJSONRepository\";\nimport { useAsync } from \"react-async-hook\";\n\nconst MAX_BOUNDS: FitBounds = [\n  [166.8778, -11.70256],\n  [167.0321, -11.6259],\n];\nconst MIN_ZOOM = 13;\nconst MAX_ZOOM = 18;\n\nconst Mapbox = ReactMapboxGl({\n  accessToken:\n    \"pk.eyJ1IjoiYW5kaXBhZXR6b2xkIiwiYSI6ImNqOWgyY2F5NjBnNnAyeXBodzByemRsbWoifQ.wW4aCiUFv2PLhGB2S75sNg\",\n  minZoom: MIN_ZOOM,\n  maxZoom: MAX_ZOOM,\n});\n\nconst STYLE = \"mapbox://styles/andipaetzold/ckn7q8rj60q2f17qxug5shkjq\";\n\nconst routePaint: LinePaint = {\n  \"line-color\": \"#fc6719\",\n  \"line-width\": 4,\n};\n\ninterface Props {\n  routeId: number | undefined;\n}\n\nexport default function RouteMap({ routeId }: Props) {\n  const { result: geojson } = useAsync(\n    async () => {\n      if (!routeId) {\n        return undefined;\n      }\n\n      return await getRouteGeoJSON(routeId);\n    },\n    [routeId]\n  );\n\n  const [map, setMap] = useState<Map | undefined>(undefined);\n\n  useEffect(() => {\n    if (!map || !geojson) {\n      return;\n    }\n\n    const coordinates: [number, number][] = geojson.geometry.coordinates;\n\n    const bounds = coordinates.reduce(\n      (bounds, coord) => bounds.extend(coord),\n      new LngLatBounds(coordinates[0], coordinates[0])\n    );\n\n    map.fitBounds(bounds, {\n      padding: 20,\n    });\n  }, [map, geojson]);\n\n  return (\n    <Mapbox\n      // eslint-disable-next-line react/style-prop-object\n      style={STYLE}\n      containerStyle={{\n        height: \"100vh\",\n        width: \"100vw\",\n      }}\n      maxBounds={MAX_BOUNDS}\n      onStyleLoad={(map) => setMap(map)}\n    >\n      <ZoomControl />\n      {/* <ScaleControl /> */}\n      {geojson && <GeoJSONLayer data={geojson} linePaint={routePaint} />}\n    </Mapbox>\n  );\n}\n","import React, { useState } from \"react\";\nimport RouteSelector from \"./RouteSelector\";\nimport styles from \"./App.module.css\";\nimport RouteMap from \"./RouteMap\";\n\nexport default function App() {\n  const [routeId, setRouteId] = useState<number | undefined>();\n\n  return (\n    <div className={styles.Wrapper}>\n      <RouteSelector routeId={routeId} onChange={setRouteId} />\n      <RouteMap routeId={routeId} />\n    </div>\n  );\n}\n","import \"mapbox-gl/dist/mapbox-gl.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"app\")\n);\n"],"sourceRoot":""}