{"version":3,"sources":["App.module.css","ElevationChart.module.css","RouteSelector.module.css","data/index.ts","StravaSegmentRepository.ts","ElevationChart.tsx","worldConfig.ts","maps/crit-city.png","maps/france.png","maps/innsbruck.png","maps/london.png","maps/new-york.png","maps/paris.png","maps/richmond.png","maps/watopia.png","maps/yorkshire.png","RouteMap.tsx","services/search.ts","RouteSelector.tsx","App.tsx","hooks/useHash.ts","index.tsx"],"names":["module","exports","routes","routesJSON","segments","segmentsJSON","worlds","worldsJSON","cache","getStravaSegmentStream","segmentSlug","stream","a","cacheKey","fetchStravaSegmentStream","getStravaSegmentStreams","streams","Promise","all","map","streamData","Object","fromEntries","i","fetch","response","json","REQUIRED_STREAMS","ElevationChart","route","onMouseHoverDistanceChange","segment","useAsync","slug","result","data","useMemo","undefined","uniqWith","distance","index","Math","round","elevation","altitude","b","className","styles","Container","ResponsiveContainer","width","height","AreaChart","margin","top","right","left","bottom","baseValue","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","vertical","XAxis","name","dataKey","type","allowDecimals","tickCount","domain","unit","YAxis","Tooltip","content","props","TooltipContent","onMouseDistance","isAnimationActive","position","y","cursor","stroke","Area","fillOpacity","fill","useEffect","payload","length","label","style","padding","backgroundColor","border","whiteSpace","display","paddingTop","paddingBottom","color","separator","fontWeight","worldConfigs","imageBounds","routeBounds","image","france","innsbruck","london","paris","richmond","watopia","yorkshire","RouteMap","routeSelection","mouseHoverDistance","world","worldConfig","stravaSegmentsInWorld","w","segmentsInWorld","filter","s","sport","stravaSegmentId","stravaSegments","stravaData","useState","setMap","zoomControl","setPosition","routeStravaSegment","r","bounds","latlng","reduce","coord","extend","LatLngBounds","invalidateSize","fitBounds","setMaxBounds","minZoom","getBoundsZoom","setMinZoom","pointCoordinates","pointIndex","findIndex","d","MapContainer","whenCreated","maxZoom","ScaleControl","ImageOverlay","url","attribution","Pane","Polyline","positions","pathOptions","weight","LayersControl","Overlay","checked","LayerGroup","Circle","center","radius","fillColor","searchResults","terms","t","toLocaleLowerCase","find","searchResultTypes","title","RouteSelector","selection","onChange","query","setQuery","term","split","sr","every","some","srt","includes","search","List","SimpleListItem","TextField","placeholder","value","e","target","isRightAddon","rightChildren","Button","buttonType","onClick","aria-label","FontIcon","Divider","sort","localeCompare","ListItem","searchResult","ListSubheader","handleSearchResultClick","App","window","location","hash","setHash","listener","addEventListener","removeEventListener","slice","useHash","setMouseHoverDistance","c","Wrapper","routeSelected","rs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18922025.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\",\"routeSelected\":\"App_routeSelected__V3XxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ElevationChart_Container__3f2Iq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RouteSelector_Container__2aeQm\"};","import { Route, Segment, World } from \"../types\";\nimport routesJSON from \"./routes.json\";\nimport segmentsJSON from \"./segments.json\";\nimport worldsJSON from \"./worlds.json\";\n\nexport const routes: Route[] = routesJSON as any;\nexport const segments: Segment[] = segmentsJSON as any;\nexport const worlds: World[] = worldsJSON as any;\n\n","import { StravaSegment } from \"./types\";\n\nconst cache: { [cacheKey: string]: Promise<any> } = {};\n\nexport async function getStravaSegment(\n  segmentSlug: string\n): Promise<StravaSegment> {\n  if (!cache[segmentSlug]) {\n    cache[segmentSlug] = fetchStravaSegment(segmentSlug);\n  }\n\n  return await cache[segmentSlug];\n}\n\nexport async function getStravaSegmentStream<\n  Stream extends \"altitude\" | \"distance\" | \"latlng\"\n>(segmentSlug: string, stream: Stream): Promise<StravaSegment[Stream]> {\n  const cacheKey = `${segmentSlug}-${stream}`;\n  if (!cache[cacheKey]) {\n    cache[cacheKey] = fetchStravaSegmentStream(segmentSlug, stream);\n  }\n\n  return cache[cacheKey];\n}\n\nexport async function getStravaSegmentStreams<\n  Stream extends \"altitude\" | \"distance\" | \"latlng\"\n>(\n  segmentSlug: string,\n  streams: ReadonlyArray<Stream>\n): Promise<Pick<StravaSegment, Stream>> {\n  const streamData = await Promise.all(\n    streams.map((stream) => getStravaSegmentStream(segmentSlug, stream))\n  );\n\n  // @ts-ignore\n  return Object.fromEntries(\n    streams.map((stream, i) => [stream, streamData[i]])\n  );\n}\n\nasync function fetchStravaSegment(segmentSlug: string) {\n  const response = await Promise.all([\n    getStravaSegmentStream(segmentSlug, \"altitude\"),\n    getStravaSegmentStream(segmentSlug, \"distance\"),\n    getStravaSegmentStream(segmentSlug, \"latlng\"),\n  ]);\n\n  return {\n    altitude: response[0],\n    distance: response[1],\n    latlng: response[2],\n  };\n}\n\nasync function fetchStravaSegmentStream<\n  Stream extends \"altitude\" | \"distance\" | \"latlng\"\n>(segmentSlug: string, stream: Stream): Promise<StravaSegment[Stream]> {\n  const response = await fetch(`segments/${segmentSlug}/${stream}.json`);\n  return await response.json();\n}\n","import uniqWith from \"lodash/uniqWith\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport styles from \"./ElevationChart.module.css\";\nimport { getStravaSegmentStreams } from \"./StravaSegmentRepository\";\nimport { Route, StravaSegment } from \"./types\";\n\ninterface Props {\n  route: Route;\n  onMouseHoverDistanceChange: (distance: number | undefined) => void;\n}\n\nconst REQUIRED_STREAMS = [\"altitude\", \"distance\"] as const;\n\nexport function ElevationChart({ route, onMouseHoverDistanceChange }: Props) {\n  const { result: segment } = useAsync<\n    Pick<StravaSegment, \"altitude\" | \"distance\">\n  >(getStravaSegmentStreams, [route.slug, REQUIRED_STREAMS]);\n\n  const data: any[] | undefined = useMemo(() => {\n    if (segment === undefined) {\n      return;\n    }\n\n    return uniqWith(\n      segment.distance.map((distance, index) => ({\n        distance: Math.round(distance / 10) / 100,\n        elevation: segment.altitude[index],\n      })),\n      (a, b) => a.distance === b.distance\n    );\n  }, [segment]);\n\n  if (data === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={styles.Container}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n          // @ts-ignore\n          baseValue=\"dataMin\"\n        >\n          <defs>\n            <linearGradient id=\"colorElevation\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"black\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"black\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <CartesianGrid vertical={false} />\n          <XAxis\n            name=\"Distance\"\n            dataKey=\"distance\"\n            type=\"number\"\n            allowDecimals={false}\n            tickCount={10}\n            domain={[0, \"dataMax\"]}\n            unit=\"km\"\n          />\n\n          <YAxis\n            name=\"Elevation\"\n            type=\"number\"\n            allowDecimals={false}\n            tickCount={5}\n            domain={[0, \"auto\"]}\n            unit=\"m\"\n          />\n          <Tooltip\n            content={(props) => (\n              <TooltipContent\n                {...props}\n                onMouseDistance={onMouseHoverDistanceChange}\n              />\n            )}\n            isAnimationActive={false}\n            position={{ y: 10 }}\n            cursor={{ stroke: \"black\" }}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"elevation\"\n            name=\"Elevation\"\n            stroke=\"black\"\n            fillOpacity={1}\n            fill=\"url(#colorElevation)\"\n            unit=\"m\"\n            isAnimationActive={false}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\ninterface TooltipContentProps extends TooltipProps<any, any> {\n  onMouseDistance: (distance: number | undefined) => void;\n}\n\nfunction TooltipContent(props: TooltipContentProps) {\n  useEffect(() => {\n    if (props.payload === undefined || props.payload.length === 0) {\n      props.onMouseDistance(undefined);\n    } else {\n      props.onMouseDistance(props.label * 1_000);\n    }\n  }, [props]);\n\n  if (props.payload === undefined || props.payload.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: 0,\n        padding: 10,\n        backgroundColor: \"#fff\",\n        border: \"1px solid #ccc\",\n        whiteSpace: \"nowrap\",\n      }}\n    >\n      <ul\n        className=\"recharts-tooltip-item-list\"\n        style={{ padding: 0, margin: 0 }}\n      >\n        <li\n          className=\"recharts-tooltip-item\"\n          style={{\n            display: \"block\",\n            paddingTop: 4,\n            paddingBottom: 4,\n            color: \"#000\",\n          }}\n        >\n          <span className=\"recharts-tooltip-item-name\">Distance</span>\n          <span className=\"recharts-tooltip-item-separator\">\n            {props.separator}\n          </span>\n          <span\n            className=\"recharts-tooltip-item-value\"\n            style={{ fontWeight: \"bold\" }}\n          >\n            {Math.round(props.label * 10) / 10}\n          </span>\n          <span\n            className=\"recharts-tooltip-item-unit\"\n            style={{ fontWeight: \"bold\" }}\n          >\n            km\n          </span>\n        </li>\n\n        <li\n          className=\"recharts-tooltip-item\"\n          style={{\n            display: \"block\",\n            paddingTop: 4,\n            paddingBottom: 4,\n            color: \"#000\",\n          }}\n        >\n          <span className=\"recharts-tooltip-item-name\">\n            {props.payload[0].name}\n          </span>\n          <span className=\"recharts-tooltip-item-separator\">\n            {props.separator}\n          </span>\n          <span\n            className=\"recharts-tooltip-item-value\"\n            style={{ fontWeight: \"bold\" }}\n          >\n            {Math.round(\n              props.payload[0].payload[props.payload[0].dataKey as string]\n            )}\n          </span>\n          <span\n            className=\"recharts-tooltip-item-unit\"\n            style={{ fontWeight: \"bold\" }}\n          >\n            {props.payload[0].unit}\n          </span>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import { LatLngTuple } from \"leaflet\";\nimport critCityMap from \"./maps/crit-city.png\";\nimport franceMap from \"./maps/france.png\";\nimport innsbruckMap from \"./maps/innsbruck.png\";\nimport londonMap from \"./maps/london.png\";\nimport newYorkMap from \"./maps/new-york.png\";\nimport parisMap from \"./maps/paris.png\";\nimport richmondMap from \"./maps/richmond.png\";\nimport watopiaMap from \"./maps/watopia.png\";\nimport yorkshireMap from \"./maps/yorkshire.png\";\nimport { WorldSlug } from \"./types\";\n\nexport type WorldConfig = {\n  imageBounds: [LatLngTuple, LatLngTuple];\n  routeBounds: [LatLngTuple, LatLngTuple];\n  image: string;\n  backgroundColor: string;\n};\n\nexport const worldConfigs: Record<WorldSlug, WorldConfig> = {\n  \"crit-city\": {\n    imageBounds: [\n      [-10.3657, 165.7824],\n      [-10.4038, 165.8207],\n    ],\n    routeBounds: [\n      [53.999691, -1.560305],\n      [53.99099, -1.545435],\n    ],\n    image: critCityMap,\n    backgroundColor: \"#7c9938\",\n  },\n  france: {\n    imageBounds: [\n      [-21.64155, 166.1384],\n      [-21.7564, 166.26125],\n    ],\n    routeBounds: [\n      [-21.652087, 166.148225],\n      [-21.74491, 166.251404],\n    ],\n    image: franceMap,\n    backgroundColor: \"#6f992d\",\n  },\n  innsbruck: {\n    imageBounds: [\n      [47.2947, 11.3501],\n      [47.2055, 11.4822],\n    ],\n    routeBounds: [\n      [47.280902, 11.386414],\n      [47.214544, 11.445934],\n    ],\n    image: innsbruckMap,\n    backgroundColor: \"#7c9938\",\n  },\n  london: {\n    imageBounds: [\n      [51.5362, -0.1776],\n      [51.4601, -0.0555],\n    ],\n    routeBounds: [\n      [51.511272, -0.164224],\n      [51.474343, -0.061869],\n    ],\n    image: londonMap,\n    backgroundColor: \"#6f992d\",\n  },\n  \"new-york\": {\n    imageBounds: [\n      [40.81725, -74.0227],\n      [40.74085, -73.9222],\n    ],\n    routeBounds: [\n      [40.799618, -73.982068],\n      [40.763547, -73.949602],\n    ],\n    image: newYorkMap,\n    backgroundColor: \"#bbbbb7\",\n  },\n  paris: {\n    imageBounds: [\n      [48.9058, 2.2561],\n      [48.82945, 2.3722],\n    ],\n    routeBounds: [\n      [48.874328, 2.294207],\n      [48.860895, 2.331992],\n    ],\n    image: parisMap,\n    backgroundColor: \"#b9b9b9\",\n  },\n  richmond: {\n    imageBounds: [\n      [37.5774, -77.48954],\n      [37.5014, -77.394],\n    ],\n    routeBounds: [\n      [37.558393, -77.467668],\n      [37.520429, -77.415864],\n    ],\n    image: richmondMap,\n    backgroundColor: \"#7c9938\",\n  },\n  watopia: {\n    imageBounds: [\n      [-11.62597, 166.87747],\n      [-11.70255, 167.03255],\n    ],\n    routeBounds: [\n      [-11.634595, 166.88756],\n      [-11.693004, 167.002777],\n    ],\n    image: watopiaMap,\n    backgroundColor: \"#0884e2\",\n  },\n  yorkshire: {\n    imageBounds: [\n      [54.0254, -1.632],\n      [53.9491, -1.5022],\n    ],\n    routeBounds: [\n      [53.999691, -1.592961],\n      [53.974875, -1.539474],\n    ],\n    image: yorkshireMap,\n    backgroundColor: \"#7c9938\",\n  },\n};\n","export default __webpack_public_path__ + \"static/media/crit-city.3bab2d0f.png\";","export default __webpack_public_path__ + \"static/media/france.aded90ff.png\";","export default __webpack_public_path__ + \"static/media/innsbruck.9821ed90.png\";","export default __webpack_public_path__ + \"static/media/london.54ae112e.png\";","export default __webpack_public_path__ + \"static/media/new-york.5bf9b5e8.png\";","export default __webpack_public_path__ + \"static/media/paris.d1eaa520.png\";","export default __webpack_public_path__ + \"static/media/richmond.72df812b.png\";","export default __webpack_public_path__ + \"static/media/watopia.0901a23e.png\";","export default __webpack_public_path__ + \"static/media/yorkshire.b83235cf.png\";","import { LatLngBounds, LatLngExpression, Map } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport {\n  Circle,\n  ImageOverlay,\n  LayerGroup,\n  LayersControl,\n  MapContainer,\n  Pane,\n  Polyline,\n  ScaleControl,\n} from \"react-leaflet\";\nimport { segments } from \"./data\";\nimport { RouteSelection } from \"./RouteSelector\";\nimport {\n  getStravaSegmentStream,\n  getStravaSegmentStreams,\n} from \"./StravaSegmentRepository\";\nimport { Route, WorldSlug } from \"./types\";\nimport { worldConfigs } from \"./worldConfig\";\n\ninterface Props {\n  routeSelection: RouteSelection;\n  mouseHoverDistance: number | undefined;\n}\n\nexport default function RouteMap({\n  routeSelection,\n  mouseHoverDistance,\n}: Props) {\n  const world = routeSelection.world;\n  const worldConfig = worldConfigs[world];\n\n  const { result: stravaSegmentsInWorld } = useAsync(\n    async (w: WorldSlug) => {\n      const segmentsInWorld = segments\n        .filter((s) => s.sport === \"cycling\")\n        .filter((s) => s.world === w)\n        .filter((s) => s.stravaSegmentId !== undefined);\n\n      const stravaSegments = await Promise.all(\n        segmentsInWorld.map((s) => getStravaSegmentStream(s.slug, \"latlng\"))\n      );\n      return segmentsInWorld.map((s, i) => ({\n        ...s,\n        stravaData: stravaSegments[i],\n      }));\n    },\n    [world]\n  );\n\n  const [map, setMap] = useState<Map | undefined>();\n  useEffect(() => {\n    map?.zoomControl.setPosition(\"topright\");\n  }, [map]);\n\n  const { result: routeStravaSegment } = useAsync(\n    async (r?: Route) => {\n      if (r === undefined) {\n        return;\n      }\n\n      return await getStravaSegmentStreams(r.slug, [\"distance\", \"latlng\"]);\n    },\n    [routeSelection.route]\n  );\n\n  useEffect(() => {\n    if (!map || !routeStravaSegment) {\n      return;\n    }\n\n    const bounds = routeStravaSegment.latlng.reduce(\n      (bounds, coord) => bounds.extend(coord),\n      new LatLngBounds(\n        routeStravaSegment.latlng[0],\n        routeStravaSegment.latlng[0]\n      )\n    );\n\n    map.invalidateSize();\n    map.fitBounds(bounds);\n  }, [map, routeStravaSegment, worldConfig]);\n\n  useEffect(() => {\n    if (!map || !routeSelection) {\n      return;\n    }\n\n    const world = routeSelection.world;\n    const worldConfig = worldConfigs[world];\n\n    map.invalidateSize();\n    map.setMaxBounds(worldConfig.imageBounds);\n\n    const minZoom = map.getBoundsZoom(worldConfig.imageBounds, false);\n    map.setMinZoom(minZoom);\n\n    if (!routeSelection.route) {\n      map.fitBounds(worldConfig.routeBounds);\n    }\n  }, [map, routeSelection]);\n\n  const pointCoordinates = useMemo<LatLngExpression | undefined>(() => {\n    if (!routeStravaSegment || !mouseHoverDistance) {\n      return;\n    }\n\n    const pointIndex = routeStravaSegment.distance.findIndex(\n      (d) => d > mouseHoverDistance\n    );\n    if (!pointIndex) {\n      return;\n    }\n    return routeStravaSegment.latlng[pointIndex];\n  }, [routeStravaSegment, mouseHoverDistance]);\n\n  return (\n    <MapContainer\n      key={routeSelection.world}\n      whenCreated={(map) => setMap(map)}\n      bounds={worldConfig.imageBounds}\n      style={{ backgroundColor: worldConfig.backgroundColor }}\n      maxZoom={19}\n    >\n      <ScaleControl position=\"bottomright\" />\n      <ImageOverlay\n        url={worldConfig.image}\n        bounds={worldConfig.imageBounds}\n        attribution='&amp;copy <a href=\"https://zwift.com\" rel=\"noreferrer noopener\">Zwift</a>'\n      />\n\n      <Pane name=\"route\">\n        {routeStravaSegment && (\n          <Polyline\n            positions={routeStravaSegment.latlng}\n            pathOptions={{ color: \"#fc6719\", weight: 5 }}\n          />\n        )}\n      </Pane>\n\n      <LayersControl>\n        <LayersControl.Overlay name=\"Show segments\" checked>\n          <LayerGroup>\n            <Pane name=\"segments\">\n              {stravaSegmentsInWorld?.map((s) => (\n                <Polyline\n                  key={s.slug}\n                  positions={s.stravaData}\n                  pathOptions={{ color: \"green\", weight: 5 }}\n                />\n              ))}\n            </Pane>\n          </LayerGroup>\n        </LayersControl.Overlay>\n      </LayersControl>\n\n      <Pane name=\"mouse-position\">\n        {pointCoordinates && (\n          <Circle\n            center={pointCoordinates}\n            radius={10}\n            pathOptions={{\n              color: \"black\",\n              fillColor: \"black\",\n              fillOpacity: 1,\n            }}\n          />\n        )}\n      </Pane>\n    </MapContainer>\n  );\n}\n","import { routes, worlds } from \"../data\";\nimport { Route, Segment, World } from \"../types\";\n\nexport type SearchResult =\n  | SearchResultWorld\n  | SearchResultRoute\n  | SearchResultSegment;\n\nexport interface SearchResultWorld {\n  type: \"world\";\n  terms: string[];\n  data: World;\n}\n\nexport interface SearchResultRoute {\n  type: \"route\";\n  terms: string[];\n  data: Route;\n}\n\nexport interface SearchResultSegment {\n  type: \"segment\";\n  terms: string[];\n  data: Segment;\n}\n\nconst searchResults: SearchResult[] = [\n  ...worlds.map((world) => ({\n    type: \"world\" as const,\n    terms: [world.name].map((t) => t.toLocaleLowerCase()),\n    data: world,\n  })),\n  ...routes\n    .filter((route) => route.sport === \"cycling\")\n    .filter((route) => route.stravaSegmentId !== undefined)\n    .map((route) => ({\n      type: \"route\" as const,\n      terms: [\n        worlds.find((w) => w.slug === route.world)!.name,\n        route.name,\n      ].map((t) => t.toLocaleLowerCase()),\n      data: route,\n    })),\n  //   ...segments\n  //   .filter((route) => route.sport === \"cycling\")\n  //     .filter((route) => route.stravaSegmentId !== undefined)\n  //     .map((segment) => ({\n  //     type: \"segment\" as const,\n  //     terms: [\n  //       worlds.find((w) => w.slug === segment.slug)!.name,\n  //       segment.name,\n  //     ].map((t) => t.toLocaleLowerCase()),\n  //     data: segment,\n  //   })),\n];\n\nexport function search(term: string): SearchResult[] {\n  const terms = term\n    .toLocaleLowerCase()\n    .split(\" \")\n    .filter((t) => t.length > 0);\n\n  return searchResults.filter((sr) =>\n    terms.every((t) => sr.terms.some((srt) => srt.includes(t)))\n  );\n}\n\nexport const searchResultTypes = {\n  world: {\n    title: \"Worlds\",\n  },\n  route: {\n    title: \"Routes\",\n  },\n  segment: {\n    title: \"Segments\",\n  },\n};\n","import { Button } from \"@react-md/button\";\nimport { Divider } from \"@react-md/divider\";\nimport { TextField } from \"@react-md/form\";\nimport { FontIcon } from \"@react-md/icon\";\nimport { List, ListItem, ListSubheader, SimpleListItem } from \"@react-md/list\";\nimport React, { useState } from \"react\";\nimport { routes, worlds } from \"./data\";\nimport styles from \"./RouteSelector.module.css\";\nimport { search, SearchResult, searchResultTypes } from \"./services/search\";\nimport { Route, WorldSlug } from \"./types\";\n\nexport interface RouteSelection {\n  world: WorldSlug;\n  route?: Route;\n}\n\ninterface Props {\n  selection: RouteSelection;\n  onChange: (route: RouteSelection) => void;\n}\nexport default function RouteSelector({ selection, onChange }: Props) {\n  const [query, setQuery] = useState(\"\");\n\n  const searchResults = search(query);\n\n  const handleSearchResultClick = (searchResult: SearchResult) => {\n    switch (searchResult.type) {\n      case \"world\":\n        onChange({ world: searchResult.data.slug });\n        break;\n      case \"route\":\n        onChange({ world: searchResult.data.world, route: searchResult.data });\n        break;\n    }\n  };\n\n  return (\n    <div className={styles.Container}>\n      <List style={{ width: \"100%\" }}>\n        <SimpleListItem>\n          <TextField\n            id=\"search-input\"\n            style={{ width: \"100%\" }}\n            placeholder={worlds.find((w) => w.slug === selection.world)!.name}\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            isRightAddon={false}\n            rightChildren={\n              query !== \"\" && (\n                <Button\n                  buttonType=\"icon\"\n                  style={{ right: 0, position: \"absolute\" }}\n                  onClick={() => setQuery(\"\")}\n                  aria-label=\"Clear search field\"\n                >\n                  <FontIcon>clear</FontIcon>\n                </Button>\n              )\n            }\n          />\n        </SimpleListItem>\n        {query === \"\" ? (\n          <>\n            <Divider />\n            {routes\n              .filter((route) => route.world === selection.world)\n              .filter((route) => route.sport === \"cycling\")\n              .filter((route) => route.stravaSegmentId !== undefined)\n              .sort((a, b) => a.name.localeCompare(b.name))\n              .map((route) => (\n                <ListItem\n                  key={route.slug}\n                  onClick={() => onChange({ world: route.world, route: route })}\n                >\n                  {route.name}\n                </ListItem>\n              ))}\n          </>\n        ) : (\n          <div>\n            {searchResults.map((searchResult, i) => (\n              <>\n                {searchResults[i - 1]?.type !== searchResult.type && (\n                  <>\n                    <Divider />\n                    <ListSubheader>\n                      {searchResultTypes[searchResult.type].title}\n                    </ListSubheader>\n                  </>\n                )}\n                <ListItem onClick={() => handleSearchResultClick(searchResult)}>\n                  {searchResult.data.name}\n                </ListItem>\n              </>\n            ))}\n          </div>\n        )}\n      </List>\n    </div>\n  );\n}\n","import c from \"classnames\";\nimport React, { useMemo, useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport { routes, worlds } from \"./data\";\nimport { ElevationChart } from \"./ElevationChart\";\nimport { useHash } from \"./hooks/useHash\";\nimport RouteMap from \"./RouteMap\";\nimport RouteSelector, { RouteSelection } from \"./RouteSelector\";\nimport { WorldSlug } from \"./types\";\n\nexport default function App() {\n  const [hash, setHash] = useHash();\n  const routeSelection = useMemo<RouteSelection>(() => {\n    if (worlds.map((world) => world.slug).includes(hash as any)) {\n      return { world: hash as WorldSlug };\n    } else if (routes.find((r) => r.slug === hash)) {\n      const route = routes.find((r) => r.slug === hash)!;\n      return {\n        world: route.world,\n        route,\n      };\n    }\n\n    return { world: \"watopia\" as WorldSlug };\n  }, [hash]);\n\n  const handleRouteSelectionChange = (rs: RouteSelection) => {\n    if (rs.route) {\n      setHash(rs.route.slug);\n    } else {\n      setHash(rs.world);\n    }\n  };\n\n  const [mouseHoverDistance, setMouseHoverDistance] = useState<\n    number | undefined\n  >(undefined);\n\n  return (\n    <div\n      className={c(styles.Wrapper, {\n        [styles.routeSelected]: routeSelection.route !== undefined,\n      })}\n    >\n      <RouteSelector\n        selection={routeSelection}\n        onChange={handleRouteSelectionChange}\n      />\n      <RouteMap\n        routeSelection={routeSelection}\n        mouseHoverDistance={mouseHoverDistance}\n      />\n      {routeSelection.route && (\n        <ElevationChart\n          route={routeSelection.route}\n          onMouseHoverDistanceChange={setMouseHoverDistance}\n        />\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useHash(): [string, (hash: string) => void] {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const listener = () => {\n      setHash(window.location.hash);\n    };\n\n    window.addEventListener(\"popstate\", listener);\n    return () => window.removeEventListener(\"popstate\", listener);\n  }, []);\n\n  const updateHash = (hash: string) => {\n    window.location.hash = `#${hash}`;\n  };\n\n  return [hash.slice(1), updateHash];\n}\n","import \"./index.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"app\")\n);\n"],"sourceRoot":""}