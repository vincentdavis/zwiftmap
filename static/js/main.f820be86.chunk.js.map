{"version":3,"sources":["App.module.css","RouteMap.module.css","RouteSelector.module.css","RouteSelector.tsx","RouteGeoJSONRepository.ts","RouteMap.tsx","constants.ts","App.tsx","index.tsx"],"names":["module","exports","filteredRoutes","routes","filter","route","world","sport","undefined","stravaSegmentId","sort","a","b","name","localeCompare","RouteSelector","selectedRouteSlug","routeSlug","onChange","handleChange","e","target","checked","value","className","styles","Container","Sidebar","map","c","Item","selected","slug","type","routeGeoJSONCache","getRouteGeoJSON","fetch","response","json","mapboxgl","workerClass","mapboxWorker","MAX_BOUNDS","Mapbox","ReactMapboxGl","accessToken","process","minZoom","maxZoom","routePaint","RouteMap","geojson","useAsync","result","useState","setMap","useEffect","coordinates","geometry","bounds","reduce","coord","extend","LngLatBounds","fitBounds","padding","style","maxBounds","onStyleLoad","data","linePaint","App","setRouteSlug","Wrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"033BACAA,EAAOC,QAAU,CAAC,QAAU,uB,mBCA5BD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,kBAAoB,sC,kBCA9ED,EAAOC,QAAU,CAAC,UAAY,iCAAiC,QAAU,+BAA+B,KAAO,4BAA4B,SAAW,kC,qKCKhJC,EAA4BC,EAC/BC,QAAO,SAACC,GAAD,MAA2B,YAAhBA,EAAMC,SACxBF,QAAO,SAACC,GAAD,MAA2B,YAAhBA,EAAME,SACxBH,QAAO,SAACC,GAAD,YAAqCG,IAA1BH,EAAMI,mBACxBC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAKC,cAAcF,EAAEC,SAO1B,SAASE,EAAT,GAGJ,IAFEC,EAEH,EAFRC,UACAC,EACQ,EADRA,SAEMC,EAAe,SAACC,GAChBA,EAAEC,OAAOC,SACXJ,EAASE,EAAEC,OAAOE,QAItB,OACE,qBAAKC,UAAWC,IAAOC,UAAvB,SACE,qBAAKF,UAAWC,IAAOE,QAAvB,SACGzB,EAAe0B,KAAI,SAACvB,GAAD,OAClB,wBAEEmB,UAAWK,IAAEJ,IAAOK,KAAR,eACTL,IAAOM,SAAWf,IAAsBX,EAAM2B,OAHnD,UAME,uBACEC,KAAK,QACLpB,KAAK,SACLU,MAAOlB,EAAM2B,KACbV,QAASN,IAAsBX,EAAM2B,KACrCd,SAAUC,IAEXd,EAAMQ,OAZFR,EAAM2B,a,oFChCjBE,EAAkD,GAEjD,SAAeC,EAAtB,kC,4CAAO,WAA+BlB,GAA/B,eAAAN,EAAA,yDACAuB,EAAkBjB,GADlB,gCAEoBmB,MAAM,UAAD,OAAWnB,EAAX,aAFzB,cAEGoB,EAFH,gBAGkCA,EAASC,OAH3C,OAGHJ,EAAkBjB,GAHf,uCAMEiB,EAAkBjB,IANpB,4C,2CCePsB,IAASC,YAAcC,IAEvB,IAAMC,EAAwB,CAC5B,CAAC,UAAW,UACZ,CAAC,UAAW,UAKRC,EAASC,YAAc,CAC3BC,YC3B0BC,mGD4B1BC,QALe,GAMfC,QALe,KAQXC,EAAwB,CAC5B,aAAc,UACd,aAAc,GAOD,SAASC,EAAT,GAAyC,IAArBjC,EAAoB,EAApBA,UACjBkC,EAAYC,YAAQ,sBAAC,sBAAAzC,EAAA,yDAC9BM,EAD8B,8CAE1BT,GAF0B,uBAKtB2B,EAAgBlB,GALM,mFAMlC,CAACA,IANIoC,OAD6C,EAS/BC,wBAA0B9C,GATK,mBAS9CoB,EAT8C,KASzC2B,EATyC,KA4BrD,OAjBAC,qBAAU,WACR,GAAK5B,GAAQuB,EAAb,CAIA,IAAMM,EAAkCN,EAAQO,SAASD,YAEnDE,EAASF,EAAYG,QACzB,SAACD,EAAQE,GAAT,OAAmBF,EAAOG,OAAOD,KACjC,IAAIE,eAAaN,EAAY,GAAIA,EAAY,KAG/C7B,EAAIoC,UAAUL,EAAQ,CACpBM,QAAS,QAEV,CAACrC,EAAKuB,IAGP,eAACR,EAAD,CAEEuB,MCvEsBpB,+DDwEtBtB,UAAWC,IAAOC,UAClByC,UAAWzB,EACX0B,YAAa,SAACxC,GAAD,OAAS2B,EAAO3B,IAL/B,UAOE,cAAC,IAAD,IACA,cAAC,IAAD,IACCuB,GAAW,cAAC,IAAD,CAAckB,KAAMlB,EAASmB,UAAWrB,OE1E3C,SAASsB,IAAO,IAAD,EACMjB,qBADN,mBACrBrC,EADqB,KACVuD,EADU,KAG5B,OACE,sBAAKhD,UAAWC,IAAOgD,QAAvB,UACE,cAAC1D,EAAD,CAAeE,UAAWA,EAAWC,SAAUsD,IAC/C,cAACtB,EAAD,CAAUjC,UAAWA,O,MCL3ByD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACL,EAAD,MAEFM,SAASC,eAAe,U","file":"static/js/main.f820be86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RouteMap_Container__15uh3\",\"navigationControl\":\"RouteMap_navigationControl__1ZKIj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RouteSelector_Container__2aeQm\",\"Sidebar\":\"RouteSelector_Sidebar__25tGa\",\"Item\":\"RouteSelector_Item__402nz\",\"selected\":\"RouteSelector_selected__2JMs6\"};","import routes from \"./routes.json\";\nimport styles from \"./RouteSelector.module.css\";\nimport { Route } from \"./types\";\nimport { ChangeEvent } from \"react\";\nimport c from \"classnames\";\n\nconst filteredRoutes: Route[] = ((routes as unknown) as Route[])\n  .filter((route) => route.world === \"Watopia\")\n  .filter((route) => route.sport === \"cycling\")\n  .filter((route) => route.stravaSegmentId !== undefined)\n  .sort((a, b) => a.name.localeCompare(b.name));\n\ninterface Props {\n  routeSlug: string | undefined;\n  onChange: (routeKey: string | undefined) => void;\n}\n\nexport default function RouteSelector({\n  routeSlug: selectedRouteSlug,\n  onChange,\n}: Props) {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(e.target.value);\n    }\n  };\n\n  return (\n    <div className={styles.Container}>\n      <div className={styles.Sidebar}>\n        {filteredRoutes.map((route) => (\n          <label\n            key={route.slug}\n            className={c(styles.Item, {\n              [styles.selected]: selectedRouteSlug === route.slug,\n            })}\n          >\n            <input\n              type=\"radio\"\n              name=\"routes\"\n              value={route.slug}\n              checked={selectedRouteSlug === route.slug}\n              onChange={handleChange}\n            />\n            {route.name}\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n}\n","const routeGeoJSONCache: { [routeSlug: string]: any } = {};\n\nexport async function getRouteGeoJSON(routeSlug: string): Promise<any> {\n  if (!routeGeoJSONCache[routeSlug]) {\n    const response = await fetch(`routes/${routeSlug}.geojson`);\n    routeGeoJSONCache[routeSlug] = await response.json();\n  }\n\n  return routeGeoJSONCache[routeSlug];\n}\n","import mapboxgl, { LinePaint, LngLatBounds, Map } from \"mapbox-gl\";\nimport React, { useEffect, useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport ReactMapboxGl, {\n  GeoJSONLayer,\n  ScaleControl,\n  ZoomControl,\n} from \"react-mapbox-gl\";\nimport { FitBounds } from \"react-mapbox-gl/lib/map\";\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport mapboxWorker from \"worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker\";\nimport { MAPBOX_STYLE, MAPBOX_TOKEN } from \"./constants\";\nimport { getRouteGeoJSON } from \"./RouteGeoJSONRepository\";\nimport styles from \"./RouteMap.module.css\";\n\n// @ts-ignore\nmapboxgl.workerClass = mapboxWorker;\n\nconst MAX_BOUNDS: FitBounds = [\n  [166.8778, -11.70256],\n  [167.0321, -11.6259],\n];\nconst MIN_ZOOM = 13;\nconst MAX_ZOOM = 18;\n\nconst Mapbox = ReactMapboxGl({\n  accessToken: MAPBOX_TOKEN,\n  minZoom: MIN_ZOOM,\n  maxZoom: MAX_ZOOM,\n});\n\nconst routePaint: LinePaint = {\n  \"line-color\": \"#fc6719\",\n  \"line-width\": 4,\n};\n\ninterface Props {\n  routeSlug: string | undefined;\n}\n\nexport default function RouteMap({ routeSlug }: Props) {\n  const { result: geojson } = useAsync(async () => {\n    if (!routeSlug) {\n      return undefined;\n    }\n\n    return await getRouteGeoJSON(routeSlug);\n  }, [routeSlug]);\n\n  const [map, setMap] = useState<Map | undefined>(undefined);\n\n  useEffect(() => {\n    if (!map || !geojson) {\n      return;\n    }\n\n    const coordinates: [number, number][] = geojson.geometry.coordinates;\n\n    const bounds = coordinates.reduce(\n      (bounds, coord) => bounds.extend(coord),\n      new LngLatBounds(coordinates[0], coordinates[0])\n    );\n\n    map.fitBounds(bounds, {\n      padding: 20,\n    });\n  }, [map, geojson]);\n\n  return (\n    <Mapbox\n      // eslint-disable-next-line react/style-prop-object\n      style={MAPBOX_STYLE}\n      className={styles.Container}\n      maxBounds={MAX_BOUNDS}\n      onStyleLoad={(map) => setMap(map)}\n    >\n      <ZoomControl />\n      <ScaleControl />\n      {geojson && <GeoJSONLayer data={geojson} linePaint={routePaint} />}\n    </Mapbox>\n  );\n}\n","export const MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN!;\nexport const MAPBOX_STYLE = process.env.REACT_APP_MAPBOX_STYLE!;\n","import React, { useState } from \"react\";\nimport RouteSelector from \"./RouteSelector\";\nimport styles from \"./App.module.css\";\nimport RouteMap from \"./RouteMap\";\n\nexport default function App() {\n  const [routeSlug, setRouteSlug] = useState<string | undefined>();\n\n  return (\n    <div className={styles.Wrapper}>\n      <RouteSelector routeSlug={routeSlug} onChange={setRouteSlug} />\n      <RouteMap routeSlug={routeSlug} />\n    </div>\n  );\n}\n","import \"mapbox-gl/dist/mapbox-gl.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"app\")\n);\n"],"sourceRoot":""}