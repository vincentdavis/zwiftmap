{"version":3,"sources":["App.module.css","ElevationChart.module.css","RouteMap.module.css","util/simplify.ts","ElevationChart.tsx","util.ts","RouteMap.tsx","webpack:///./src/constants.ts?85ee","RouteSelector.tsx","SegmentRepository.ts","App.tsx","hooks/useHash.ts","index.tsx","RouteSelector.module.css"],"names":["module","exports","getSqDist","p1","p2","dx","x","dy","y","getSqSegDist","p","t","simplifyRadialDist","points","sqTolerance","point","prevPoint","newPoints","i","len","length","push","simplifyDPStep","first","last","simplified","index","maxSqDist","sqDist","simplifyDouglasPeucker","simplify","tolerance","highestQuality","ElevationChart","segment","data","useMemo","id","distance","map","altitude","className","styles","Container","margin","top","right","bottom","left","xScale","type","min","max","yScale","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","format","value","axisLeft","tickValues","pointSize","useMesh","enableSlices","animate","enableGridX","sliceTooltip","slice","style","background","padding","border","Math","round","flipLatLng","mapboxgl","workerClass","mapboxWorker","MAX_BOUNDS","Mapbox","ReactMapboxGl","accessToken","process","minZoom","maxZoom","dragPan","dragRotate","pitchWithRotate","touchZoomRotate","LINE_PAINT","RouteMap","mouseHoverDistance","useState","undefined","setMap","useEffect","coordinates","latlng","bounds","reduce","coord","extend","LngLatBounds","resize","fitBounds","lineGeoJSON","lineString","pointGeoJSON","along","units","maxBounds","onStyleLoad","linePaint","circlePaint","filteredRoutes","routes","filter","route","world","sport","stravaSegmentId","sort","a","b","name","localeCompare","RouteSelector","selectedRouteSlug","routeSlug","onChange","onWorldChange","handleChange","e","target","checked","Sidebar","c","Item","selected","slug","segmentCache","getSegment","segmentSlug","fetch","response","json","App","window","location","hash","setHash","listener","addEventListener","removeEventListener","useHash","setRouteSlug","useAsync","result","setMouseHoverDistance","Wrapper","routeSelected","onMouseHoverDistanceChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b33b58a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\",\"routeSelected\":\"App_routeSelected__V3XxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ElevationChart_Container__3f2Iq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RouteMap_Container__15uh3\",\"navigationControl\":\"RouteMap_navigationControl__1ZKIj\"};","// @see: https://github.com/mourner/simplify-js\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction getSqDist(p1: Point, p2: Point) {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n\n  return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p: Point, p1: Point, p2: Point) {\n  let x = p1.x;\n  let y = p1.y;\n  let dx = p2.x - x;\n  let dy = p2.y - y;\n\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2.x;\n      y = p2.y;\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p.x - x;\n  dy = p.y - y;\n\n  return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points: Point[], sqTolerance: number) {\n  let prevPoint = points[0];\n  const newPoints = [prevPoint];\n\n  let point: Point | undefined;\n  for (let i = 1, len = points.length; i < len; ++i) {\n    point = points[i];\n\n    if (getSqDist(point, prevPoint) > sqTolerance) {\n      newPoints.push(point);\n      prevPoint = point;\n    }\n  }\n\n  if (prevPoint !== point) {\n    newPoints.push(point!);\n  }\n\n  return newPoints;\n}\n\nfunction simplifyDPStep(\n  points: Point[],\n  first: number,\n  last: number,\n  sqTolerance: number,\n  simplified: Point[]\n) {\n  let maxSqDist = sqTolerance;\n\n  let index: number | undefined;\n  for (let i = first + 1; i < last; ++i) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index! - first > 1) {\n      simplifyDPStep(points, first, index!, sqTolerance, simplified);\n    }\n    simplified.push(points[index!]);\n    if (last - index! > 1) {\n      simplifyDPStep(points, index!, last, sqTolerance, simplified);\n    }\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points: Point[], sqTolerance: number) {\n  const last = points.length - 1;\n\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n\n  return simplified;\n}\n\n// both algorithms combined for awesome performance\nexport function simplify(\n  points: Point[],\n  tolerance = 1,\n  highestQuality = false\n) {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance * tolerance;\n\n  points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n  points = simplifyDouglasPeucker(points, sqTolerance);\n\n  return points;\n}\n","import { ResponsiveLine, Serie } from \"@nivo/line\";\nimport React, { useMemo } from \"react\";\nimport { Segment } from \"./types\";\nimport { simplify } from \"./util/simplify\";\nimport styles from \"./ElevationChart.module.css\";\n\ninterface Props {\n  segment: Segment;\n  onMouseHoverDistanceChange: (distance: number | undefined) => void;\n}\n\nexport function ElevationChart({ segment }: Props) {\n  const data: Serie[] = useMemo(() => {\n    const serie = {\n      id: \"Elevation\",\n      data: simplify(\n        segment.distance.map((distance, index) => ({\n          x: distance,\n          y: segment.altitude[index],\n        })),\n        0.25\n      ),\n    };\n\n    return [serie];\n  }, [segment]);\n\n  return (\n    <div className={styles.Container}>\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 25, right: 25, bottom: 50, left: 50 }}\n        xScale={{ type: \"linear\", min: \"auto\", max: \"auto\" }}\n        yScale={{ type: \"linear\", min: \"auto\", max: \"auto\" }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          orient: \"bottom\",\n          tickSize: 5,\n          tickPadding: 5,\n          format: (value) => `${(value as number) / 1_000} km`,\n        }}\n        axisLeft={{\n          orient: \"left\",\n          tickSize: 5,\n          tickPadding: 5,\n          tickValues: 5,\n          format: (value) => `${value} m`,\n        }}\n        pointSize={0}\n        useMesh={true}\n        enableSlices=\"x\"\n        animate={false}\n        enableGridX={false}\n        sliceTooltip={({ slice }) => (\n          <table\n            style={{\n              background: \"white\",\n              padding: \"9px 12px\",\n              border: \"1px solid #ccc\",\n            }}\n          >\n            <tbody>\n              <tr>\n                <td>Distance:</td>\n                <td>\n                  <strong>\n                    {Math.round((slice.points[0].data.x as number) / 1_000)} km\n                  </strong>\n                </td>\n              </tr>\n              <tr>\n                <td>Elevation:</td>\n                <td>\n                  <strong>\n                    {Math.round(slice.points[0].data.y as number)} m\n                  </strong>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        )}\n      />\n    </div>\n  );\n}\n","export function flipLatLng(p: [number, number]): [number, number] {\n  return [p[1], p[0]];\n}\n","import along from \"@turf/along\";\nimport { lineString } from \"@turf/helpers\";\nimport mapboxgl, { LinePaint, LngLatBounds, Map } from \"mapbox-gl\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport ReactMapboxGl, {\n  GeoJSONLayer,\n  ScaleControl,\n  ZoomControl,\n} from \"react-mapbox-gl\";\nimport { FitBounds } from \"react-mapbox-gl/lib/map\";\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport mapboxWorker from \"worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker\";\nimport { MAPBOX_STYLE_WATOPIA, MAPBOX_TOKEN } from \"./constants\";\nimport styles from \"./RouteMap.module.css\";\nimport { Segment } from \"./types\";\nimport { flipLatLng } from \"./util\";\n\n// @ts-ignore\nmapboxgl.workerClass = mapboxWorker;\n\nconst MAX_BOUNDS: FitBounds = [\n  [166.8781, -11.7025],\n  [167.0318, -11.626],\n];\nconst MIN_ZOOM = 9;\nconst MAX_ZOOM = 18;\n\nconst Mapbox = ReactMapboxGl({\n  accessToken: MAPBOX_TOKEN,\n  minZoom: MIN_ZOOM,\n  maxZoom: MAX_ZOOM,\n  dragPan: false,\n  dragRotate: false,\n  pitchWithRotate: false,\n  touchZoomRotate: false,\n});\n\nconst LINE_PAINT: LinePaint = {\n  \"line-color\": \"#fc6719\",\n  \"line-width\": 4,\n};\n\ninterface Props {\n  segment: Segment | undefined;\n  mouseHoverDistance: number | undefined;\n}\n\nexport default function RouteMap({ segment, mouseHoverDistance }: Props) {\n  const [map, setMap] = useState<Map | undefined>(undefined);\n\n  useEffect(() => {\n    if (!map || !segment) {\n      return;\n    }\n\n    const coordinates: [number, number][] = segment.latlng.map(flipLatLng);\n    const bounds = coordinates.reduce(\n      (bounds, coord) => bounds.extend(coord),\n      new LngLatBounds(coordinates[0], coordinates[0])\n    );\n\n    map.resize().fitBounds(bounds, {\n      padding: 20,\n    });\n  }, [map, segment]);\n\n  const lineGeoJSON = useMemo(() => {\n    if (!segment) {\n      return;\n    }\n    return lineString(segment.latlng.map(flipLatLng));\n  }, [segment]);\n\n  const pointGeoJSON = useMemo(() => {\n    if (!lineGeoJSON || !mouseHoverDistance) {\n      return;\n    }\n\n    return along(lineGeoJSON, mouseHoverDistance, { units: \"kilometers\" });\n  }, [lineGeoJSON, mouseHoverDistance]);\n\n  return (\n    <Mapbox\n      // eslint-disable-next-line react/style-prop-object\n      style={MAPBOX_STYLE_WATOPIA}\n      className={styles.Container}\n      maxBounds={MAX_BOUNDS}\n      onStyleLoad={(map) => setMap(map)}\n    >\n      <ZoomControl />\n      <ScaleControl />\n      {lineGeoJSON && (\n        <GeoJSONLayer data={lineGeoJSON} linePaint={LINE_PAINT} />\n      )}\n      {pointGeoJSON && (\n        <GeoJSONLayer\n          data={pointGeoJSON}\n          circlePaint={{\n            \"circle-radius\": 7.5,\n            \"circle-color\": \"white\",\n            \"circle-stroke-width\": 1,\n          }}\n        />\n      )}\n    </Mapbox>\n  );\n}\n","export const MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN!;\nexport const MAPBOX_STYLE_WATOPIA = process.env.REACT_APP_MAPBOX_STYLE_WATOPIA!;\n","import routes from \"./data/routes.json\";\nimport styles from \"./RouteSelector.module.css\";\nimport { Route, World } from \"./types\";\nimport { ChangeEvent } from \"react\";\nimport c from \"classnames\";\n\nconst filteredRoutes: Route[] = ((routes as unknown) as Route[])\n  .filter((route) => route.world === \"watopia\")\n  .filter((route) => route.sport === \"cycling\")\n  .filter((route) => route.stravaSegmentId !== undefined)\n  .sort((a, b) => a.name.localeCompare(b.name));\n\ninterface Props {\n  routeSlug: string | undefined;\n  onChange: (routeKey: string) => void;\n\n  world: World;\n  onWorldChange: (world: World) => void;\n}\n\nexport default function RouteSelector({\n  routeSlug: selectedRouteSlug,\n  onChange,\n\n  world,\n  onWorldChange,\n}: Props) {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(e.target.value);\n    }\n  };\n\n  return (\n    <div className={styles.Container}>\n      <div className={styles.Sidebar}>\n        <select\n          value={world}\n          onChange={(e) => onWorldChange(e.target.value as World)}\n        >\n          <option value=\"crit-city\">Crit City</option>\n          <option value=\"france\">France</option>\n          <option value=\"innsbruck\">Innsbruck</option>\n          <option value=\"london\">London</option>\n          <option value=\"new-york\">New York</option>\n          <option value=\"paris\">Paris</option>\n          <option value=\"richmond\">Richmond</option>\n          <option value=\"watopia\">Watopia</option>\n          <option value=\"yorkshire\">Yorkshire</option>\n        </select>\n\n        {filteredRoutes.map((route) => (\n          <label\n            key={route.slug}\n            className={c(styles.Item, {\n              [styles.selected]: selectedRouteSlug === route.slug,\n            })}\n          >\n            <input\n              type=\"radio\"\n              name=\"routes\"\n              value={route.slug}\n              checked={selectedRouteSlug === route.slug}\n              onChange={handleChange}\n            />\n            {route.name}\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { Segment } from \"./types\";\n\nconst segmentCache: { [segmentSlug: string]: Segment } = {};\n\nexport async function getSegment(segmentSlug: string): Promise<Segment> {\n  if (!segmentCache[segmentSlug]) {\n    const response = await fetch(`segments/${segmentSlug}.json`);\n    segmentCache[segmentSlug] = await response.json();\n  }\n\n  return segmentCache[segmentSlug];\n}\n","import c from \"classnames\";\nimport React, { useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport styles from \"./App.module.css\";\nimport { ElevationChart } from \"./ElevationChart\";\nimport { useHash } from \"./hooks/useHash\";\nimport RouteMap from \"./RouteMap\";\nimport RouteSelector from \"./RouteSelector\";\nimport { getSegment } from \"./SegmentRepository\";\nimport { World } from \"./types\";\n\nexport default function App() {\n  const [routeSlug, setRouteSlug] = useHash();\n  const { result: segment } = useAsync(async () => {\n    if (routeSlug === \"\") {\n      return undefined;\n    }\n\n    return await getSegment(routeSlug);\n  }, [routeSlug]);\n  const [mouseHoverDistance, setMouseHoverDistance] = useState<\n    number | undefined\n  >(undefined);\n\n  const [world, onWorldChange] = useState<World>(\"france\" as World);\n\n  return (\n    <div\n      className={c(styles.Wrapper, {\n        [styles.routeSelected]: segment !== undefined,\n      })}\n    >\n      <RouteSelector\n        routeSlug={routeSlug}\n        onChange={setRouteSlug}\n        world={world}\n        onWorldChange={onWorldChange}\n      />\n      <RouteMap segment={segment} mouseHoverDistance={mouseHoverDistance} />\n      {segment && (\n        <ElevationChart\n          segment={segment}\n          onMouseHoverDistanceChange={setMouseHoverDistance}\n        />\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useHash(): [string, (hash: string) => void] {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const listener = () => {\n      setHash(window.location.hash);\n    };\n\n    window.addEventListener(\"popstate\", listener);\n    return () => window.removeEventListener(\"popstate\", listener);\n  }, []);\n\n  const updateHash = (hash: string) => {\n    window.location.hash = `#${hash}`;\n  };\n\n  return [hash.slice(1), updateHash];\n}\n","import \"mapbox-gl/dist/mapbox-gl.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"app\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"RouteSelector_Container__2aeQm\",\"Sidebar\":\"RouteSelector_Sidebar__25tGa\",\"Item\":\"RouteSelector_Item__402nz\",\"selected\":\"RouteSelector_selected__2JMs6\"};"],"sourceRoot":""}