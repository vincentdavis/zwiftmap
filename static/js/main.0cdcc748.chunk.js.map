{"version":3,"sources":["App.module.css","components/Sidebar/index.module.css","ElevationChart.module.css","data/index.ts","services/search.ts","StravaSegmentRepository.ts","components/ElevationChartPreview/index.tsx","components/Sidebar/SearchResultCardRoute.tsx","hooks/useOnScreen.tsx","components/Sidebar/SearchResultCardWorld.tsx","components/Sidebar/SearchResultList.tsx","components/Sidebar/index.tsx","ElevationChart.tsx","worldConfig.ts","maps/crit-city.png","maps/france.png","maps/innsbruck.png","maps/london.png","maps/new-york.png","maps/paris.png","maps/richmond.png","maps/watopia.png","maps/yorkshire.png","RouteMap.tsx","App.tsx","hooks/useHash.ts","index.tsx"],"names":["module","exports","routes","routesJSON","segments","segmentsJSON","worlds","worldsJSON","searchResults","map","world","type","terms","name","t","toLocaleLowerCase","data","filter","route","sport","undefined","stravaSegmentId","find","w","slug","searchResultTypes","title","segment","cache","getStravaSegmentStream","segmentSlug","stream","a","cacheKey","fetchStravaSegmentStream","getStravaSegmentStreams","streams","Promise","all","streamData","Object","fromEntries","i","fetch","response","json","REQUIRED_STREAMS","ElevationChartPreview","useAsync","result","useMemo","uniqWith","distance","index","Math","round","elevation","altitude","b","AreaChart","height","width","baseValue","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","domain","unit","hide","YAxis","allowDecimals","Area","stroke","fillOpacity","fill","isAnimationActive","CircularProgress","small","circleStyle","SearchResultCardRoute","onClick","ListItem","secondaryText","getRouteInfo","rightAddonType","rightAddon","ChartContainer","ref","useRef","onScreen","useState","isIntersecting","setIntersecting","useEffect","current","observer","IntersectionObserver","entry","observe","unobserve","useOnScreen","style","pointerEvents","SearchResultCardWorld","r","length","s","SearchResultList","onResultClick","searchResult","Divider","ListSubheader","SearchResultCard","Sidebar","selection","onChange","query","setQuery","term","split","sr","every","some","srt","includes","search","className","styles","Container","List","SimpleListItem","TextField","placeholder","value","e","target","isRightAddon","rightChildren","Button","buttonType","right","position","aria-label","FontIcon","sort","localeCompare","ElevationChart","onMouseHoverDistanceChange","ResponsiveContainer","margin","top","left","bottom","CartesianGrid","vertical","tickCount","Tooltip","content","props","TooltipContent","onMouseDistance","y","cursor","payload","label","padding","backgroundColor","border","whiteSpace","display","paddingTop","paddingBottom","color","separator","fontWeight","worldConfigs","imageBounds","routeBounds","image","france","innsbruck","london","paris","richmond","watopia","yorkshire","RouteMap","routeSelection","mouseHoverDistance","worldConfig","stravaSegmentsInWorld","segmentsInWorld","stravaSegments","stravaData","setMap","zoomControl","setPosition","routeStravaSegment","bounds","latlng","reduce","coord","extend","LatLngBounds","invalidateSize","fitBounds","setMaxBounds","minZoom","getBoundsZoom","setMinZoom","pointCoordinates","pointIndex","findIndex","d","MapContainer","whenCreated","maxZoom","ScaleControl","ImageOverlay","url","attribution","Pane","Polyline","positions","pathOptions","weight","LayersControl","Overlay","checked","LayerGroup","Circle","center","radius","fillColor","App","window","location","hash","setHash","listener","addEventListener","removeEventListener","slice","useHash","setMouseHoverDistance","c","Wrapper","routeSelected","rs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cdcc748.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__2FdRQ\",\"routeSelected\":\"App_routeSelected__V3XxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Sidebar_Container__35ytb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ElevationChart_Container__3f2Iq\"};","import { Route, Segment, World } from \"../types\";\nimport routesJSON from \"./routes.json\";\nimport segmentsJSON from \"./segments.json\";\nimport worldsJSON from \"./worlds.json\";\n\nexport const routes: Route[] = routesJSON as any;\nexport const segments: Segment[] = segmentsJSON as any;\nexport const worlds: World[] = worldsJSON as any;\n\n","import { routes, worlds } from \"../data\";\nimport { Route, Segment, World } from \"../types\";\n\nexport type SearchResult =\n  | SearchResultWorld\n  | SearchResultRoute\n  | SearchResultSegment;\n\nexport interface SearchResultWorld {\n  type: \"world\";\n  terms: string[];\n  data: World;\n}\n\nexport interface SearchResultRoute {\n  type: \"route\";\n  terms: string[];\n  data: Route;\n}\n\nexport interface SearchResultSegment {\n  type: \"segment\";\n  terms: string[];\n  data: Segment;\n}\n\nconst searchResults: SearchResult[] = [\n  ...worlds.map((world) => ({\n    type: \"world\" as const,\n    terms: [world.name].map((t) => t.toLocaleLowerCase()),\n    data: world,\n  })),\n  ...routes\n    .filter((route) => route.sport === \"cycling\")\n    .filter((route) => route.stravaSegmentId !== undefined)\n    .map((route) => ({\n      type: \"route\" as const,\n      terms: [\n        worlds.find((w) => w.slug === route.world)!.name,\n        route.name,\n      ].map((t) => t.toLocaleLowerCase()),\n      data: route,\n    })),\n  //   ...segments\n  //   .filter((route) => route.sport === \"cycling\")\n  //     .filter((route) => route.stravaSegmentId !== undefined)\n  //     .map((segment) => ({\n  //     type: \"segment\" as const,\n  //     terms: [\n  //       worlds.find((w) => w.slug === segment.slug)!.name,\n  //       segment.name,\n  //     ].map((t) => t.toLocaleLowerCase()),\n  //     data: segment,\n  //   })),\n];\n\nexport function search(term: string): SearchResult[] {\n  const terms = term\n    .toLocaleLowerCase()\n    .split(\" \")\n    .filter((t) => t.length > 0);\n\n  return searchResults.filter((sr) =>\n    terms.every((t) => sr.terms.some((srt) => srt.includes(t)))\n  );\n}\n\nexport const searchResultTypes = {\n  world: {\n    title: \"Worlds\",\n  },\n  route: {\n    title: \"Routes\",\n  },\n  segment: {\n    title: \"Segments\",\n  },\n};\n","import { StravaSegment } from \"./types\";\n\nconst cache: { [cacheKey: string]: Promise<any> } = {};\n\nexport async function getStravaSegment(\n  segmentSlug: string\n): Promise<StravaSegment> {\n  if (!cache[segmentSlug]) {\n    cache[segmentSlug] = fetchStravaSegment(segmentSlug);\n  }\n\n  return await cache[segmentSlug];\n}\n\nexport async function getStravaSegmentStream<\n  Stream extends \"altitude\" | \"distance\" | \"latlng\"\n>(segmentSlug: string, stream: Stream): Promise<StravaSegment[Stream]> {\n  const cacheKey = `${segmentSlug}-${stream}`;\n  if (!cache[cacheKey]) {\n    cache[cacheKey] = fetchStravaSegmentStream(segmentSlug, stream);\n  }\n\n  return cache[cacheKey];\n}\n\nexport async function getStravaSegmentStreams<\n  Stream extends \"altitude\" | \"distance\" | \"latlng\"\n>(\n  segmentSlug: string,\n  streams: ReadonlyArray<Stream>\n): Promise<Pick<StravaSegment, Stream>> {\n  const streamData = await Promise.all(\n    streams.map((stream) => getStravaSegmentStream(segmentSlug, stream))\n  );\n\n  // @ts-ignore\n  return Object.fromEntries(\n    streams.map((stream, i) => [stream, streamData[i]])\n  );\n}\n\nasync function fetchStravaSegment(segmentSlug: string) {\n  const response = await Promise.all([\n    getStravaSegmentStream(segmentSlug, \"altitude\"),\n    getStravaSegmentStream(segmentSlug, \"distance\"),\n    getStravaSegmentStream(segmentSlug, \"latlng\"),\n  ]);\n\n  return {\n    altitude: response[0],\n    distance: response[1],\n    latlng: response[2],\n  };\n}\n\nasync function fetchStravaSegmentStream<\n  Stream extends \"altitude\" | \"distance\" | \"latlng\"\n>(segmentSlug: string, stream: Stream): Promise<StravaSegment[Stream]> {\n  const response = await fetch(`segments/${segmentSlug}/${stream}.json`);\n  return await response.json();\n}\n","import { CircularProgress } from \"@react-md/progress\";\nimport uniqWith from \"lodash/uniqWith\";\nimport React, { useMemo } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { Area, AreaChart, XAxis, YAxis } from \"recharts\";\nimport { getStravaSegmentStreams } from \"../../StravaSegmentRepository\";\nimport { Route, StravaSegment } from \"../../types\";\n\ninterface Props {\n  route: Route;\n}\n\nconst REQUIRED_STREAMS = [\"altitude\", \"distance\"];\n\nexport function ElevationChartPreview({ route }: Props) {\n  const { result: segment } = useAsync<\n    Pick<StravaSegment, \"altitude\" | \"distance\">\n  >(getStravaSegmentStreams, [route.slug, REQUIRED_STREAMS]);\n\n  const data: any[] | undefined = useMemo(() => {\n    if (segment === undefined) {\n      return;\n    }\n\n    return uniqWith(\n      segment.distance.map((distance, index) => ({\n        distance: Math.round(distance / 100) / 10,\n        elevation: segment.altitude[index],\n      })),\n      (a, b) => a.distance === b.distance\n    );\n  }, [segment]);\n\n  if (!data) {\n    return (\n      <CircularProgress\n        id={`elevation-preview-${route.slug}`}\n        small\n        circleStyle={{ stroke: \"black\" }}\n      />\n    );\n  }\n\n  return (\n    <AreaChart\n      height={50}\n      width={100}\n      data={data}\n      // @ts-ignore\n      baseValue=\"dataMin\"\n    >\n      <defs>\n        <linearGradient id=\"colorElevation\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"5%\" stopColor=\"black\" stopOpacity={0.8} />\n          <stop offset=\"95%\" stopColor=\"black\" stopOpacity={0} />\n        </linearGradient>\n      </defs>\n\n      <XAxis\n        dataKey=\"distance\"\n        type=\"number\"\n        domain={[0, \"dataMax\"]}\n        unit=\"km\"\n        hide={true}\n      />\n\n      <YAxis\n        dataKey=\"elevation\"\n        type=\"number\"\n        allowDecimals={false}\n        domain={[0, \"auto\"]}\n        unit=\"m\"\n        hide={true}\n      />\n\n      <Area\n        type=\"monotone\"\n        dataKey=\"elevation\"\n        name=\"Elevation\"\n        stroke=\"black\"\n        fillOpacity={1}\n        fill=\"url(#colorElevation)\"\n        unit=\"m\"\n        isAnimationActive={false}\n      />\n    </AreaChart>\n  );\n}\n","import { ListItem } from \"@react-md/list\";\nimport React, { useRef } from \"react\";\nimport { useOnScreen } from \"../../hooks/useOnScreen\";\nimport { Route } from \"../../types\";\nimport { ElevationChartPreview } from \"../ElevationChartPreview\";\n\nexport interface Props {\n  route: Route;\n  onClick: () => void;\n}\n\nexport function SearchResultCardRoute({ route, onClick }: Props) {\n  return (\n    <ListItem\n      secondaryText={getRouteInfo(route)}\n      onClick={onClick}\n      rightAddonType=\"large-media\"\n      rightAddon={<ChartContainer route={route} />}\n    >\n      {route.name}\n    </ListItem>\n  );\n}\n\nfunction getRouteInfo(route: Route) {\n  return `${route.distance}km | ${route.elevation}m`;\n}\n\ninterface ChartProps {\n  route: Route;\n}\n\nfunction ChartContainer({ route }: ChartProps) {\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const onScreen = useOnScreen(ref);\n\n  return (\n    <div ref={ref} style={{ width: \"100%\", pointerEvents: \"none\" }}>\n      {onScreen ? <ElevationChartPreview route={route} /> : null}\n    </div>\n  );\n}\n","import { MutableRefObject, useEffect, useState } from \"react\";\n\n/**\n * @see https://usehooks.com/useOnScreen/\n */\nexport function useOnScreen(ref: MutableRefObject<HTMLElement | null>) {\n  const [isIntersecting, setIntersecting] = useState(false);\n  useEffect(() => {\n    const current = ref.current;\n\n    const observer = new IntersectionObserver(([entry]) => {\n      setIntersecting(entry.isIntersecting);\n    });\n    if (current) {\n      observer.observe(current);\n    }\n    return () => {\n      if (current) {\n        observer.unobserve(current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return isIntersecting;\n}\n","import { ListItem } from \"@react-md/list\";\nimport { routes, segments } from \"../../data\";\nimport { World } from \"../../types\";\n\nexport interface Props {\n  world: World;\n  onClick: () => void;\n}\n\nexport function SearchResultCardWorld({ world, onClick }: Props) {\n  const secondaryText = `${\n    routes.filter((r) => r.world === world.slug).length\n  } routes | ${segments.filter((s) => s.world === world.slug).length} segments`;\n\n  return (\n    <ListItem secondaryText={secondaryText} onClick={onClick}>\n      {world.name}\n    </ListItem>\n  );\n}\n","import { Divider } from \"@react-md/divider\";\nimport { ListSubheader } from \"@react-md/list\";\nimport React, { Fragment } from \"react\";\nimport { SearchResult, searchResultTypes } from \"../../services/search\";\nimport { SearchResultCardRoute } from \"./SearchResultCardRoute\";\nimport { SearchResultCardWorld } from \"./SearchResultCardWorld\";\n\ninterface Props {\n  searchResults: ReadonlyArray<SearchResult>;\n  onResultClick: (searchResult: SearchResult) => void;\n}\n\nexport function SearchResultList({ searchResults, onResultClick }: Props) {\n  return (\n    <>\n      {searchResults.map((searchResult, i) => (\n        <Fragment key={searchResult.data.slug}>\n          {searchResults[i - 1]?.type !== searchResult.type && (\n            <>\n              <Divider />\n              <ListSubheader>\n                {searchResultTypes[searchResult.type].title}\n              </ListSubheader>\n            </>\n          )}\n          <SearchResultCard\n            searchResult={searchResult}\n            onClick={() => onResultClick(searchResult)}\n          />\n        </Fragment>\n      ))}\n    </>\n  );\n}\n\ninterface SearchResultCardProps {\n  searchResult: SearchResult;\n  onClick: () => void;\n}\n\nfunction SearchResultCard({ searchResult, onClick }: SearchResultCardProps) {\n  switch (searchResult.type) {\n    case \"world\":\n      return (\n        <SearchResultCardWorld world={searchResult.data} onClick={onClick} />\n      );\n    case \"route\":\n      return (\n        <SearchResultCardRoute route={searchResult.data} onClick={onClick} />\n      );\n    default:\n      return null;\n  }\n}\n","import { Button } from \"@react-md/button\";\nimport { Divider } from \"@react-md/divider\";\nimport { TextField } from \"@react-md/form\";\nimport { FontIcon } from \"@react-md/icon\";\nimport { List, SimpleListItem } from \"@react-md/list\";\nimport React, { useState } from \"react\";\nimport { routes, worlds } from \"../../data\";\nimport { search, SearchResult } from \"../../services/search\";\nimport { RouteSelection } from \"../../types\";\nimport styles from \"./index.module.css\";\nimport { SearchResultCardRoute } from \"./SearchResultCardRoute\";\nimport { SearchResultList } from \"./SearchResultList\";\n\ninterface Props {\n  selection: RouteSelection;\n  onChange: (route: RouteSelection) => void;\n}\nexport function Sidebar({ selection, onChange }: Props) {\n  const [query, setQuery] = useState(\"\");\n\n  const searchResults = search(query);\n\n  const handleSearchResultClick = (searchResult: SearchResult) => {\n    switch (searchResult.type) {\n      case \"world\":\n        onChange({ world: searchResult.data.slug });\n        break;\n      case \"route\":\n        onChange({ world: searchResult.data.world, route: searchResult.data });\n        break;\n    }\n  };\n\n  return (\n    <div className={styles.Container}>\n      <List style={{ width: \"100%\" }}>\n        <SimpleListItem>\n          <TextField\n            id=\"search-input\"\n            style={{ width: \"100%\" }}\n            placeholder={worlds.find((w) => w.slug === selection.world)!.name}\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            isRightAddon={false}\n            rightChildren={\n              query !== \"\" && (\n                <Button\n                  buttonType=\"icon\"\n                  style={{ right: 0, position: \"absolute\" }}\n                  onClick={() => setQuery(\"\")}\n                  aria-label=\"Clear search field\"\n                >\n                  <FontIcon>clear</FontIcon>\n                </Button>\n              )\n            }\n          />\n        </SimpleListItem>\n        {query === \"\" ? (\n          <>\n            <Divider />\n            {routes\n              .filter((route) => route.world === selection.world)\n              .filter((route) => route.sport === \"cycling\")\n              .filter((route) => route.stravaSegmentId !== undefined)\n              .sort((a, b) => a.name.localeCompare(b.name))\n              .map((route) => (\n                <SearchResultCardRoute\n                  route={route}\n                  key={route.slug}\n                  onClick={() => onChange({ world: route.world, route: route })}\n                />\n              ))}\n          </>\n        ) : (\n          <SearchResultList\n            searchResults={searchResults}\n            onResultClick={handleSearchResultClick}\n          />\n        )}\n      </List>\n    </div>\n  );\n}\n","import uniqWith from \"lodash/uniqWith\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport styles from \"./ElevationChart.module.css\";\nimport { getStravaSegmentStreams } from \"./StravaSegmentRepository\";\nimport { Route, StravaSegment } from \"./types\";\n\ninterface Props {\n  route: Route;\n  onMouseHoverDistanceChange: (distance: number | undefined) => void;\n}\n\nconst REQUIRED_STREAMS = [\"altitude\", \"distance\"] as const;\n\nexport function ElevationChart({ route, onMouseHoverDistanceChange }: Props) {\n  const { result: segment } = useAsync<\n    Pick<StravaSegment, \"altitude\" | \"distance\">\n  >(getStravaSegmentStreams, [route.slug, REQUIRED_STREAMS]);\n\n  const data: any[] | undefined = useMemo(() => {\n    if (segment === undefined) {\n      return;\n    }\n\n    return uniqWith(\n      segment.distance.map((distance, index) => ({\n        distance: Math.round(distance / 10) / 100,\n        elevation: segment.altitude[index],\n      })),\n      (a, b) => a.distance === b.distance\n    );\n  }, [segment]);\n\n  if (data === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={styles.Container}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n          // @ts-ignore\n          baseValue=\"dataMin\"\n        >\n          <defs>\n            <linearGradient id=\"colorElevation\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"black\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"black\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <CartesianGrid vertical={false} />\n          <XAxis\n            name=\"Distance\"\n            dataKey=\"distance\"\n            type=\"number\"\n            allowDecimals={false}\n            tickCount={10}\n            domain={[0, \"dataMax\"]}\n            unit=\"km\"\n          />\n\n          <YAxis\n            name=\"Elevation\"\n            type=\"number\"\n            allowDecimals={false}\n            tickCount={5}\n            domain={[0, \"auto\"]}\n            unit=\"m\"\n          />\n          <Tooltip\n            content={(props) => (\n              <TooltipContent\n                {...props}\n                onMouseDistance={onMouseHoverDistanceChange}\n              />\n            )}\n            isAnimationActive={false}\n            position={{ y: 10 }}\n            cursor={{ stroke: \"black\" }}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"elevation\"\n            name=\"Elevation\"\n            stroke=\"black\"\n            fillOpacity={1}\n            fill=\"url(#colorElevation)\"\n            unit=\"m\"\n            isAnimationActive={false}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\ninterface TooltipContentProps extends TooltipProps<any, any> {\n  onMouseDistance: (distance: number | undefined) => void;\n}\n\nfunction TooltipContent(props: TooltipContentProps) {\n  useEffect(() => {\n    if (props.payload === undefined || props.payload.length === 0) {\n      props.onMouseDistance(undefined);\n    } else {\n      props.onMouseDistance(props.label * 1_000);\n    }\n  }, [props]);\n\n  if (props.payload === undefined || props.payload.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"recharts-default-tooltip\"\n      style={{\n        margin: 0,\n        padding: 10,\n        backgroundColor: \"#fff\",\n        border: \"1px solid #ccc\",\n        whiteSpace: \"nowrap\",\n      }}\n    >\n      <ul\n        className=\"recharts-tooltip-item-list\"\n        style={{ padding: 0, margin: 0 }}\n      >\n        <li\n          className=\"recharts-tooltip-item\"\n          style={{\n            display: \"block\",\n            paddingTop: 4,\n            paddingBottom: 4,\n            color: \"#000\",\n          }}\n        >\n          <span className=\"recharts-tooltip-item-name\">Distance</span>\n          <span className=\"recharts-tooltip-item-separator\">\n            {props.separator}\n          </span>\n          <span\n            className=\"recharts-tooltip-item-value\"\n            style={{ fontWeight: \"bold\" }}\n          >\n            {Math.round(props.label * 10) / 10}\n          </span>\n          <span\n            className=\"recharts-tooltip-item-unit\"\n            style={{ fontWeight: \"bold\" }}\n          >\n            km\n          </span>\n        </li>\n\n        <li\n          className=\"recharts-tooltip-item\"\n          style={{\n            display: \"block\",\n            paddingTop: 4,\n            paddingBottom: 4,\n            color: \"#000\",\n          }}\n        >\n          <span className=\"recharts-tooltip-item-name\">\n            {props.payload[0].name}\n          </span>\n          <span className=\"recharts-tooltip-item-separator\">\n            {props.separator}\n          </span>\n          <span\n            className=\"recharts-tooltip-item-value\"\n            style={{ fontWeight: \"bold\" }}\n          >\n            {Math.round(\n              props.payload[0].payload[props.payload[0].dataKey as string]\n            )}\n          </span>\n          <span\n            className=\"recharts-tooltip-item-unit\"\n            style={{ fontWeight: \"bold\" }}\n          >\n            {props.payload[0].unit}\n          </span>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import { LatLngTuple } from \"leaflet\";\nimport critCityMap from \"./maps/crit-city.png\";\nimport franceMap from \"./maps/france.png\";\nimport innsbruckMap from \"./maps/innsbruck.png\";\nimport londonMap from \"./maps/london.png\";\nimport newYorkMap from \"./maps/new-york.png\";\nimport parisMap from \"./maps/paris.png\";\nimport richmondMap from \"./maps/richmond.png\";\nimport watopiaMap from \"./maps/watopia.png\";\nimport yorkshireMap from \"./maps/yorkshire.png\";\nimport { WorldSlug } from \"./types\";\n\nexport type WorldConfig = {\n  imageBounds: [LatLngTuple, LatLngTuple];\n  routeBounds: [LatLngTuple, LatLngTuple];\n  image: string;\n  backgroundColor: string;\n};\n\nexport const worldConfigs: Record<WorldSlug, WorldConfig> = {\n  \"crit-city\": {\n    imageBounds: [\n      [-10.3657, 165.7824],\n      [-10.4038, 165.8207],\n    ],\n    routeBounds: [\n      [53.999691, -1.560305],\n      [53.99099, -1.545435],\n    ],\n    image: critCityMap,\n    backgroundColor: \"#7c9938\",\n  },\n  france: {\n    imageBounds: [\n      [-21.64155, 166.1384],\n      [-21.7564, 166.26125],\n    ],\n    routeBounds: [\n      [-21.652087, 166.148225],\n      [-21.74491, 166.251404],\n    ],\n    image: franceMap,\n    backgroundColor: \"#6f992d\",\n  },\n  innsbruck: {\n    imageBounds: [\n      [47.2947, 11.3501],\n      [47.2055, 11.4822],\n    ],\n    routeBounds: [\n      [47.280902, 11.386414],\n      [47.214544, 11.445934],\n    ],\n    image: innsbruckMap,\n    backgroundColor: \"#7c9938\",\n  },\n  london: {\n    imageBounds: [\n      [51.5362, -0.1776],\n      [51.4601, -0.0555],\n    ],\n    routeBounds: [\n      [51.511272, -0.164224],\n      [51.474343, -0.061869],\n    ],\n    image: londonMap,\n    backgroundColor: \"#6f992d\",\n  },\n  \"new-york\": {\n    imageBounds: [\n      [40.81725, -74.0227],\n      [40.74085, -73.9222],\n    ],\n    routeBounds: [\n      [40.799618, -73.982068],\n      [40.763547, -73.949602],\n    ],\n    image: newYorkMap,\n    backgroundColor: \"#bbbbb7\",\n  },\n  paris: {\n    imageBounds: [\n      [48.9058, 2.2561],\n      [48.82945, 2.3722],\n    ],\n    routeBounds: [\n      [48.874328, 2.294207],\n      [48.860895, 2.331992],\n    ],\n    image: parisMap,\n    backgroundColor: \"#b9b9b9\",\n  },\n  richmond: {\n    imageBounds: [\n      [37.5774, -77.48954],\n      [37.5014, -77.394],\n    ],\n    routeBounds: [\n      [37.558393, -77.467668],\n      [37.520429, -77.415864],\n    ],\n    image: richmondMap,\n    backgroundColor: \"#7c9938\",\n  },\n  watopia: {\n    imageBounds: [\n      [-11.62597, 166.87747],\n      [-11.70255, 167.03255],\n    ],\n    routeBounds: [\n      [-11.634595, 166.88756],\n      [-11.693004, 167.002777],\n    ],\n    image: watopiaMap,\n    backgroundColor: \"#0884e2\",\n  },\n  yorkshire: {\n    imageBounds: [\n      [54.0254, -1.632],\n      [53.9491, -1.5022],\n    ],\n    routeBounds: [\n      [53.999691, -1.592961],\n      [53.974875, -1.539474],\n    ],\n    image: yorkshireMap,\n    backgroundColor: \"#7c9938\",\n  },\n};\n","export default __webpack_public_path__ + \"static/media/crit-city.3bab2d0f.png\";","export default __webpack_public_path__ + \"static/media/france.aded90ff.png\";","export default __webpack_public_path__ + \"static/media/innsbruck.9821ed90.png\";","export default __webpack_public_path__ + \"static/media/london.54ae112e.png\";","export default __webpack_public_path__ + \"static/media/new-york.5bf9b5e8.png\";","export default __webpack_public_path__ + \"static/media/paris.d1eaa520.png\";","export default __webpack_public_path__ + \"static/media/richmond.72df812b.png\";","export default __webpack_public_path__ + \"static/media/watopia.0901a23e.png\";","export default __webpack_public_path__ + \"static/media/yorkshire.b83235cf.png\";","import { LatLngBounds, LatLngExpression, Map } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport {\n  Circle,\n  ImageOverlay,\n  LayerGroup,\n  LayersControl,\n  MapContainer,\n  Pane,\n  Polyline,\n  ScaleControl\n} from \"react-leaflet\";\nimport { segments } from \"./data\";\nimport {\n  getStravaSegmentStream,\n  getStravaSegmentStreams\n} from \"./StravaSegmentRepository\";\nimport { Route, RouteSelection, WorldSlug } from \"./types\";\nimport { worldConfigs } from \"./worldConfig\";\n\ninterface Props {\n  routeSelection: RouteSelection;\n  mouseHoverDistance: number | undefined;\n}\n\nexport default function RouteMap({\n  routeSelection,\n  mouseHoverDistance,\n}: Props) {\n  const world = routeSelection.world;\n  const worldConfig = worldConfigs[world];\n\n  const { result: stravaSegmentsInWorld } = useAsync(\n    async (w: WorldSlug) => {\n      const segmentsInWorld = segments\n        .filter((s) => s.sport === \"cycling\")\n        .filter((s) => s.world === w)\n        .filter((s) => s.stravaSegmentId !== undefined);\n\n      const stravaSegments = await Promise.all(\n        segmentsInWorld.map((s) => getStravaSegmentStream(s.slug, \"latlng\"))\n      );\n      return segmentsInWorld.map((s, i) => ({\n        ...s,\n        stravaData: stravaSegments[i],\n      }));\n    },\n    [world]\n  );\n\n  const [map, setMap] = useState<Map | undefined>();\n  useEffect(() => {\n    map?.zoomControl.setPosition(\"topright\");\n  }, [map]);\n\n  const { result: routeStravaSegment } = useAsync(\n    async (r?: Route) => {\n      if (r === undefined) {\n        return;\n      }\n\n      return await getStravaSegmentStreams(r.slug, [\"distance\", \"latlng\"]);\n    },\n    [routeSelection.route]\n  );\n\n  useEffect(() => {\n    if (!map || !routeStravaSegment) {\n      return;\n    }\n\n    const bounds = routeStravaSegment.latlng.reduce(\n      (bounds, coord) => bounds.extend(coord),\n      new LatLngBounds(\n        routeStravaSegment.latlng[0],\n        routeStravaSegment.latlng[0]\n      )\n    );\n\n    map.invalidateSize();\n    map.fitBounds(bounds);\n  }, [map, routeStravaSegment, worldConfig]);\n\n  useEffect(() => {\n    if (!map || !routeSelection) {\n      return;\n    }\n\n    const world = routeSelection.world;\n    const worldConfig = worldConfigs[world];\n\n    map.invalidateSize();\n    map.setMaxBounds(worldConfig.imageBounds);\n\n    const minZoom = map.getBoundsZoom(worldConfig.imageBounds, false);\n    map.setMinZoom(minZoom);\n\n    if (!routeSelection.route) {\n      map.fitBounds(worldConfig.routeBounds);\n    }\n  }, [map, routeSelection]);\n\n  const pointCoordinates = useMemo<LatLngExpression | undefined>(() => {\n    if (!routeStravaSegment || !mouseHoverDistance) {\n      return;\n    }\n\n    const pointIndex = routeStravaSegment.distance.findIndex(\n      (d) => d > mouseHoverDistance\n    );\n    if (!pointIndex) {\n      return;\n    }\n    return routeStravaSegment.latlng[pointIndex];\n  }, [routeStravaSegment, mouseHoverDistance]);\n\n  return (\n    <MapContainer\n      key={routeSelection.world}\n      whenCreated={(map) => setMap(map)}\n      bounds={worldConfig.imageBounds}\n      style={{ backgroundColor: worldConfig.backgroundColor }}\n      maxZoom={19}\n    >\n      <ScaleControl position=\"bottomright\" />\n      <ImageOverlay\n        url={worldConfig.image}\n        bounds={worldConfig.imageBounds}\n        attribution='&amp;copy <a href=\"https://zwift.com\" rel=\"noreferrer noopener\">Zwift</a>'\n      />\n\n      <Pane name=\"route\">\n        {routeStravaSegment && (\n          <Polyline\n            positions={routeStravaSegment.latlng}\n            pathOptions={{ color: \"#fc6719\", weight: 5 }}\n          />\n        )}\n      </Pane>\n\n      <LayersControl>\n        <LayersControl.Overlay name=\"Show segments\" checked>\n          <LayerGroup>\n            <Pane name=\"segments\">\n              {stravaSegmentsInWorld?.map((s) => (\n                <Polyline\n                  key={s.slug}\n                  positions={s.stravaData}\n                  pathOptions={{ color: \"green\", weight: 5 }}\n                />\n              ))}\n            </Pane>\n          </LayerGroup>\n        </LayersControl.Overlay>\n      </LayersControl>\n\n      <Pane name=\"mouse-position\">\n        {pointCoordinates && (\n          <Circle\n            center={pointCoordinates}\n            radius={10}\n            pathOptions={{\n              color: \"black\",\n              fillColor: \"black\",\n              fillOpacity: 1,\n            }}\n          />\n        )}\n      </Pane>\n    </MapContainer>\n  );\n}\n","import c from \"classnames\";\nimport React, { useMemo, useState } from \"react\";\nimport styles from \"./App.module.css\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { routes, worlds } from \"./data\";\nimport { ElevationChart } from \"./ElevationChart\";\nimport { useHash } from \"./hooks/useHash\";\nimport RouteMap from \"./RouteMap\";\nimport { RouteSelection, WorldSlug } from \"./types\";\n\nexport default function App() {\n  const [hash, setHash] = useHash();\n  const routeSelection = useMemo<RouteSelection>(() => {\n    if (worlds.map((world) => world.slug).includes(hash as any)) {\n      return { world: hash as WorldSlug };\n    } else if (routes.find((r) => r.slug === hash)) {\n      const route = routes.find((r) => r.slug === hash)!;\n      return {\n        world: route.world,\n        route,\n      };\n    }\n\n    return { world: \"watopia\" as WorldSlug };\n  }, [hash]);\n\n  const handleRouteSelectionChange = (rs: RouteSelection) => {\n    if (rs.route) {\n      setHash(rs.route.slug);\n    } else {\n      setHash(rs.world);\n    }\n  };\n\n  const [mouseHoverDistance, setMouseHoverDistance] = useState<\n    number | undefined\n  >(undefined);\n\n  return (\n    <div\n      className={c(styles.Wrapper, {\n        [styles.routeSelected]: routeSelection.route !== undefined,\n      })}\n    >\n      <Sidebar\n        selection={routeSelection}\n        onChange={handleRouteSelectionChange}\n      />\n      <RouteMap\n        routeSelection={routeSelection}\n        mouseHoverDistance={mouseHoverDistance}\n      />\n      {routeSelection.route && (\n        <ElevationChart\n          route={routeSelection.route}\n          onMouseHoverDistanceChange={setMouseHoverDistance}\n        />\n      )}\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useHash(): [string, (hash: string) => void] {\n  const [hash, setHash] = useState(window.location.hash);\n\n  useEffect(() => {\n    const listener = () => {\n      setHash(window.location.hash);\n    };\n\n    window.addEventListener(\"popstate\", listener);\n    return () => window.removeEventListener(\"popstate\", listener);\n  }, []);\n\n  const updateHash = (hash: string) => {\n    window.location.hash = `#${hash}`;\n  };\n\n  return [hash.slice(1), updateHash];\n}\n","import \"./index.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"app\")\n);\n"],"sourceRoot":""}